[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Geographic Data Service Tutorials",
    "section": "",
    "text": "Explore the following tutorials directly from this page:\n\nCreating Cutting-Edge Geodemographic Classifications from Scratch in Python"
  },
  {
    "objectID": "index.html#tutorials",
    "href": "index.html#tutorials",
    "title": "Geographic Data Service Tutorials",
    "section": "",
    "text": "Explore the following tutorials directly from this page:\n\nCreating Cutting-Edge Geodemographic Classifications from Scratch in Python"
  },
  {
    "objectID": "creatinggeodem.html",
    "href": "creatinggeodem.html",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "",
    "text": "This notebook contains the full workflow for producing a geodemographic classification from scratch in python using k-means clustering.\n\nData Access and Processing:\n\nAccess UK census data and process using Pandas.\nSelect a specific region of interest (e.g., Liverpool City Region, Greater Manchester, Greater London).\n\nCensus Data Analysis and Variable selection:\n\nSelect relevant census variables for clustering.\nStandardise variables.\nPerform correlation & variance analysis to identify potentially redundant variables.\nAlternative variable selection methods (e.g., PCA, Autoencoders).\n\nClustering:\n\nDetermine optimal number of clusters using Clustergrams.\nApply K-Means clustering to classify areas based on selected variables.\nPerform top-down hierarchical clustering to divide clusters into subgroups.\n\nAnalytical Techniques:\n\nUse UMAP (Uniform Manifold Approximation and Projection) to visualise high-dimensional embeddings in 2D.\n\nVisualisation and Communication:\n\nVisualise clusters and subclusters using Kepler.gl for interactive mapping.\nExplore cluster characteristics using summary statistics and index scores.\nExport results to various formats (GeoPackage, Parquet) for use in GIS software.\n\nCluster Naming with LLMs:\n\nUse Large Language Models (LLMs) to generate descriptive names and summaries for clusters based on their characteristics."
  },
  {
    "objectID": "creatinggeodem.html#examine-the-data",
    "href": "creatinggeodem.html#examine-the-data",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Examine the data",
    "text": "Examine the data\nWe can plot the distribution of all the variables to get a sense of their distributions. Many of the variables are highly skewed, which is common for census data.\n\n# Use pandas histogram plotting function with seaborn aesthetics\nsns.set_style(\"whitegrid\")\nnrows = int(np.ceil(len(variable_df.columns) / 3))\n\nvariable_df_withnames = variable_df.copy()\nvariable_df_withnames.columns = var_lookup['Variable_Name'].values[:58]\nvariable_df_withnames.hist(bins=30, figsize=(7.5, nrows*1.5), edgecolor='black', layout=(nrows, 3))\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "creatinggeodem.html#spatial-data",
    "href": "creatinggeodem.html#spatial-data",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Spatial Data",
    "text": "Spatial Data\nWe will also need the Output Area boundaries to map the results. These can be downloaded from the ONS Geoportal. The file used here is a GeoPackage containing the 2021 Output Area boundaries for the whole of the UK, clipped to the extent of England and Wales, Scotland, and Northern Ireland.\n\n#---------\n# Import spatial data\n#---------\n\n# Output Areas (Dec 2021) Boundaries Full Clipped EW (BFC) - E&W\n# Manually downloaded file, same as in R\nOA_2021_Boundary_EW = gpd.read_file(\"input_data/boundaries/Output_Areas_2021_EW_BGC_V2_-5587136561181621407.gpkg\")\nOA_2021_Boundary_EW = OA_2021_Boundary_EW.rename(columns={\"OA21CD\": \"OA\"})[[\"OA\", \"geometry\"]]\n\n# Output Areas 2022 Scotland (GeoJSON via Google Drive link)\nOA_2022_Boundary_S = gpd.read_file(\"input_data/boundaries/Scotland_OA_22.gpkg\")\nOA_2022_Boundary_S = OA_2022_Boundary_S.rename(columns={\"code\": \"OA\"})[[\"OA\", \"geometry\"]]\n\nOA_2021_Boundary_NI = gpd.read_file(\"input_data/boundaries/DZ2021.geojson\")\nOA_2021_Boundary_NI = OA_2021_Boundary_NI.rename(columns={\"DZ2021_cd\": \"OA\"})[[\"OA\", \"geometry\"]]\n\n#---------\n# Combine OA and calculate area\n#---------\n\n# Reproject to British National Grid (EPSG:27700)\nOA_2021_Boundary_EW = OA_2021_Boundary_EW.to_crs(27700)\nOA_2022_Boundary_S = OA_2022_Boundary_S.to_crs(27700)\nOA_2021_Boundary_NI = OA_2021_Boundary_NI.to_crs(27700)\n\n\n# Merge\nOA_Boundaries = gpd.GeoDataFrame(\n    pd.concat([OA_2021_Boundary_EW, OA_2022_Boundary_S, OA_2021_Boundary_NI], ignore_index=True),\n    crs=\"EPSG:27700\"\n)\n\n# set index to OA code\nOA_Boundaries = OA_Boundaries.set_index(\"OA\")\n#---------\n# Save UK OA file\n#---------\nOA_Boundaries.to_file(\"outputs/OA_2021_22_Boundaries.gpkg\", driver=\"GPKG\")\n\n#---------\n# Load Local Authority District (LAD) for region selection\n#---------\nLAD_Boundaries = gpd.read_file(\"input_data/boundaries/Local_Authority_Districts_December_2022_UK_BGC_V2_5759908710055972638.gpkg\")\n\n\nSelecting a Region\nFor this workshop, we will focus on a specific region of the UK to keep the analysis manageable.\nFocusing on a specific region allows us to create a more detailed and relevant geodemographic classification for that area, capturing local nuances and characteristics that may be lost in a broader national classification. For example, a London specific OAC was developed as London has a drastically different demographic composition to the rest of the United Kingdom (Singleton and Longley 2024).\n\nSingleton, Alex D., and Paul A. Longley. 2024. “Classifying and Mapping Residential Structure Through the London Output Area Classification.” EPB: Urban Analytics and City Science 51 (5): 1153–64. https://doi.org/10.1177/23998083241242913.\nBy default we will use the Output Areas within the Liverpool City Region covering the city of liverpool and its surrounding areas. This region is prodominently urban and has a diverse population, making it an interesting case study for geodemographic classification. If running this notebook on your own machine, you can change the region of study from the selection below.\n\n# region definitions (LAD22CD codes)\nregion_lads = {\n    \"Greater Manchester\": [\n        \"E08000001\",\"E08000002\",\"E08000003\",\"E08000004\",\"E08000005\",\n        \"E08000006\",\"E08000007\",\"E08000008\",\"E08000009\",\"E08000010\"\n    ],\n    \"Liverpool City Region\": [\n        \"E06000006\",\"E08000011\",\"E08000012\",\"E08000013\",\"E08000014\",\"E08000015\"\n    ],\n    \"Greater London\": [\n        \"E09000001\",\"E09000002\",\"E09000003\",\"E09000004\",\"E09000005\",\n        \"E09000006\",\"E09000007\",\"E09000008\",\"E09000009\",\"E09000010\",\n        \"E09000011\",\"E09000012\",\"E09000013\",\"E09000014\",\"E09000015\",\n        \"E09000016\",\"E09000017\",\"E09000018\",\"E09000019\",\"E09000020\",\n        \"E09000021\",\"E09000022\",\"E09000023\",\"E09000024\",\"E09000025\",\n        \"E09000026\",\"E09000027\",\"E09000028\",\"E09000029\",\"E09000030\",\n        \"E09000031\",\"E09000032\",\"E09000033\"\n    ],\n    \"Scotland\": [\n        \"S12000005\",\"S12000006\",\"S12000008\",\"S12000010\",\"S12000011\",\n        \"S12000013\",\"S12000014\",\"S12000017\",\"S12000018\",\"S12000019\",\n        \"S12000020\",\"S12000021\",\"S12000023\",\"S12000026\",\"S12000027\",\n        \"S12000028\",\"S12000029\",\"S12000030\",\"S12000033\",\"S12000034\",\n        \"S12000035\",\"S12000036\",\"S12000038\",\"S12000039\",\"S12000040\",\n        \"S12000041\",\"S12000042\",\"S12000045\",\"S12000047\",\"S12000048\",\n        \"S12000049\",\"S12000050\"\n    ],\n    \"Northern Ireland\": [\n        \"N09000001\",\"N09000002\",\"N09000003\",\"N09000004\",\"N09000005\",\n        \"N09000006\",\"N09000007\",\"N09000008\",\"N09000009\",\"N09000010\",\n        \"N09000011\"\n    ],\n    \"Wales\": [\n        \"W06000001\",\"W06000002\",\"W06000003\",\"W06000004\",\"W06000005\",\n        \"W06000006\",\"W06000007\",\"W06000008\",\"W06000009\",\"W06000010\",\n        \"W06000011\",\"W06000012\",\"W06000013\",\"W06000014\",\"W06000015\",\n        \"W06000016\",\"W06000017\",\"W06000018\",\"W06000019\",\"W06000020\",\n        \"W06000021\",\"W06000022\",\"W06000023\",\"W06000024\"\n    ],\n}\n\nSelecting the region of interest:\n\n#Choose region from the list above by uncommenting the relevant line\nlad_codes = region_lads[\"Liverpool City Region\"]\n# #or eg:\n# lad_codes = region_lads[\"Northern Ireland\"]\n\n# Spatial join to filter only intersecting OAs\noas_region = gpd.sjoin(OA_Boundaries, LAD_Boundaries[LAD_Boundaries[\"LAD22CD\"].isin(lad_codes)], predicate=\"intersects\")\n\n# --- Merge OA polygons with your variable data keeping only those with matching OAs in the region\noas_region_vars = oas_region.join(variable_df, how=\"inner\")\n\n# #keeo only OAs in our region\nvariable_df_region=variable_df.loc[variable_df.index.isin(oas_region.index)]\n\n\n\nMap the area\n\nfrom shapely.ops import unary_union\n\nregion_geom = unary_union(\n    LAD_Boundaries.loc[LAD_Boundaries[\"LAD22CD\"].isin(lad_codes), \"geometry\"]\n)\nregion_centroid = region_geom.centroid\ncentroid_ll = gpd.GeoSeries([region_centroid], crs=LAD_Boundaries.crs).to_crs(epsg=4326).iloc[0]\ncentroid_lat, centroid_lon = centroid_ll.y, centroid_ll.x\n\n# --- Quick Kepler map ---\narea_map_ = KeplerGl(\n    height=600,\n    config={\n        \"version\": \"v1\",\n        \"config\": {\n            \"mapState\": {\n               'latitude': centroid_lat,\n                'longitude': centroid_lon,\n                \"zoom\": 9,\n                \"pitch\": 0,\n                \"bearing\": 0\n            }\n        }\n    }\n)\n# Add your layer\narea_map_.add_data(data=oas_region_vars)\n# If you want to export to a standalone HTML:\narea_map_.save_to_html(file_name=\"outputs/maps/region_oas_map.html\")\n# Show inside Jupyter\narea_map_"
  },
  {
    "objectID": "creatinggeodem.html#removing-variables",
    "href": "creatinggeodem.html#removing-variables",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Removing Variables",
    "text": "Removing Variables\nIf we want to remove any variables we can do so here. This could be based on the analysis above or to tailor the classification to a specific purpose.\n\n# drop_vars = ['v02', 'v04']  # Replace with actual variable names to drop\ndrop_vars = [] # Example: No variables to drop\n# for northern ireland #bangladeshi ethnicity now removed as no variation as no bangladeshi in northern ireland\n# drop_vars = ['v12'] \n\ncleaned_variable_df = transformed_variable_df.drop(columns=drop_vars)"
  },
  {
    "objectID": "creatinggeodem.html#choosing-the-number-of-clusters-k---clustergrams",
    "href": "creatinggeodem.html#choosing-the-number-of-clusters-k---clustergrams",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Choosing the number of clusters (k) - Clustergrams",
    "text": "Choosing the number of clusters (k) - Clustergrams\nWhen using k-means clustering, one of the key decisions is selecting the optimal number of clusters (k). This choice can significantly impact the quality and interpretability of the resulting geodemographic classification. Key considerations when choosing k: - Each cluster be as homogeneous as possible. - Each cluster should be as distinct from the others as possible. - The clusters should be as evenly sized as possible.\nClustergrams are visualisation technique that shows how cluster assignments change as you increase the number of clusters (k). This helps you to understand the structure in very high-dimensional space in the following ways:\n\nCluster separation: Helps you to determine the right number of clusters by visualising how cleanly clusters separate\n\nCluster stability: Shows which clusters persist across different k values (stable long lines) vs. those which are artifacts of over-clustering (short, erratic lines)\n\nSplit patterns: Reveals the natural hierarchy in the data by showing how clusters subdivide\n\nFurther guidance on interpreting clustergrams and choosing the number of clusters can be found here: Clustergram\n\ndef create_clustergram(df, n_init, save_loc, random_seed=random_seed):\n    \"\"\"\n    Create and save a clustergram for evaluating k-means clustering solutions.\n\n    The clustergram visualizes clustering stability and helps identify the optimal \n    number of clusters by performed the k-means algorithm for a range of cluster\n    numbers.\n    Since k-means is sensitive to initialization, `n_init` determines the number of \n    times the algorithm runs with different centroid seeds. The final result is the \n    best outcome based on inertia/WCSS (within-cluster sum of squares.\n\n    Parameters:\n    df (pd.DataFrame or np.ndarray): The input data for clustering.\n    n_init (int): Number of k-means runs with different initial centroid seeds. \n                  Higher values (e.g., ~1000) improve solution stability but increase runtime.\n    save_loc (str): File path to save the clustergram plot.\n    random_seed (int, optional): Random seed for reproducibility.\n    \"\"\"\n    cgram = Clustergram(range(1, 10), n_init=n_init, random_state=random_seed,verbose=False)  # Initialize clustergram model\n    cgram.fit(df)  # Fit model to data\n    cgram.plot()  # Generate plot\n    plt.savefig(save_loc)  # Save figure\n    plt.show()  # Display plot\n\n# Example usage\nn_init = 100  # Use a low value for quick testing, increase (~100) for final results\ncreate_clustergram(cleaned_variable_df, n_init, save_loc=\"outputs/plots/supergroup_clustergram.png\")\n\n\n\n\n\n\n\n\nChoose the number of clusters (k) based on the clustergram above.\n\n# Define the number of clusters (K). Choose K based on the clustergram plot.\nnum_clusters = 5\n\n\ndef run_kmeans(input_df, num_clusters, n_init, output_filepath, random_seed=None):\n    \"\"\"\n    Run K-means clustering on the input dataset and save the cluster assignments.\n\n    This function applies K-means clustering to the provided dataset, assigns cluster \n    labels to each row, and saves the cluster assignments as a lookup table.\n\n    Parameters:\n    input_df (pd.DataFrame): The input dataset to be clustered.\n    num_clusters (int): The number of clusters (K) to create.\n    n_init (int): Number of times the K-means algorithm runs with different initial \n                  centroid seeds. The best result based on inertia/WCSS is chosen. \n                  A higher value (e.g., ~1000) is recommended for final results, \n                  but a lower value can be used for testing.\n    output_filepath (str): Path to save the resulting cluster assignments.\n    random_seed (int, optional): Random seed for reproducibility.\n\n    Returns:\n    pd.DataFrame: The input DataFrame with an added 'cluster' column containing \n                  the assigned cluster for each row.\n    \"\"\"\n    df = input_df.copy()\n    # Initialize the K-means model\n    kmeans_model = KMeans(n_clusters=num_clusters,init=\"random\", random_state=random_seed, n_init=n_init)\n    \n    # Fit the model and assign clusters\n    df['cluster'] = kmeans_model.fit_predict(df)\n\n    # Ensure output directory exists\n    os.makedirs(os.path.dirname(output_filepath), exist_ok=True)\n\n    # Save the cluster assignments to a CSV file\n    df[['cluster']].to_csv(output_filepath)\n    return df\n\n\nn_init = 100 # Use a low value for quick testing, increase (~100) for final results\noutput_filepath = \"outputs/supergroups_clusteroutput.csv\"\nprint(f\"Output file path: {output_filepath}\")\n\n# Run K-means clustering\nsupergrouped_variable_df = run_kmeans(cleaned_variable_df, num_clusters, n_init=n_init, output_filepath = output_filepath, random_seed=random_seed)\n\n# Map numeric labels to letters\nlabel_map = {i: chr(65 + i) for i in range(num_clusters)}  # 0-&gt;A, 1-&gt;B, etc.\nsupergrouped_variable_df['cluster'] = supergrouped_variable_df['cluster'].map(label_map)\n\n#supergrouped_variable_df contains the cluster assignments for each row in the input data, and the input data itself.\nsupergrouped_variable_df[\"cluster\"].head()\n\nOutput file path: outputs/supergroups_clusteroutput.csv\n\n\nOA\nE00031533    B\nE00031534    B\nE00031558    B\nE00031561    A\nE00031563    B\nName: cluster, dtype: object\n\n\nVisualise the clusters on a map."
  },
  {
    "objectID": "creatinggeodem.html#umap-visualization",
    "href": "creatinggeodem.html#umap-visualization",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "UMAP Visualization",
    "text": "UMAP Visualization\nWe can use UMAP (Uniform Manifold Approximation and Projection) to visualise the high-dimensional census data in 2D. UMAP is a dimensionality reduction technique that preserves both local and global structure in the data, making it well-suited for visualising complex datasets like census data.\n\n# Features = all columns except the cluster label\nfeatures = [c for c in supergrouped_variable_df.columns if c != 'cluster']\n# Extract features and labels  (transformed)\nX = supergrouped_variable_df[features].values\nlabels = supergrouped_variable_df['cluster'].values\n\n# Fit UMAP\n# Apply UMAP to reduce 64 dimensions to 2D\nreducer = umap.UMAP(\n    n_neighbors=30,        # Numbers of neighbours\n    min_dist=0.0,          # Allow points to be closer together\n    n_components=2,        # Reduce to 2D for visualsation\n    random_state=random_seed,       # For reproducible results\n    metric='cosine',       # Cosine similarity works well for embeddings\n    init='random',         # Use random initialisation\n    n_epochs=500,          # More epochs for better convergence\n    spread=1.0,            # Controls how tightly points are packed\n    verbose=False          # Show progress\n)\n\nembedding = reducer.fit_transform(X)\n\numap_results = pd.DataFrame({\n    'UMAP1': embedding[:, 0],\n    'UMAP2': embedding[:, 1],\n    'Cluster': labels\n})\n\n# Save the UMAP results\numap_results.to_parquet('outputs/umap_results.parquet', index=False)\n\n/home/ogoodwin/projects/GeoDem_CartoWorkshop2025/.venv/lib/python3.12/site-packages/umap/umap_.py:1952: UserWarning:\n\nn_jobs value 1 overridden to 1 by setting random_state. Use no seed for parallelism.\n\n\n\n\n# Define colours for each cluster - same as earlier map\ncolours = {\n    \"A\": '#8dd3c7',\n    \"B\": '#ffffb3',\n    \"C\": '#bebada',\n    \"D\": '#fb8072',\n    \"E\": '#fdb462',\n    \"F\": \"#235477\",\n    \"G\": '#fccde5',\n    \"H\": '#d9d9d9',\n    \"I\": '#bc80bd',\n    \"J\": '#ccebc5'\n}\n\n# Create interactive UMAP scatter plot\nfig_interactive = px.scatter(\n    umap_results,\n    x='UMAP1',\n    y='UMAP2',\n    color='Cluster',\n    category_orders={\"Cluster\": sorted(umap_results[\"Cluster\"].unique())},  #\n    color_discrete_map=colours,  \n)\n\n# Style tweaks\nfig_interactive.update_traces(marker=dict(size=3, opacity=0.7))\nfig_interactive.update_layout(\n    title=\"UMAP Projection of Clusters\",\n    xaxis_title=\"UMAP 1\",\n    yaxis_title=\"UMAP 2\",\n    legend_title=\"Cluster\"\n)\n\n\n#save to html\nfig_interactive.write_html(\"outputs/umap_interactive.html\")\nfig_interactive.update_layout(width=800, height=600)\nfig_interactive.show(config={\"responsive\": False})\n\n                            \n                                            \n\n\nThe UMAP projection indicates further structure within clusters More on that in a bit.. for now lets dig into the clusters that we’ve got."
  },
  {
    "objectID": "creatinggeodem.html#cluster-statistics",
    "href": "creatinggeodem.html#cluster-statistics",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Cluster Statistics",
    "text": "Cluster Statistics\n\n#Lot at the characteristics of each cluster\n\n# Read in the data\npop_size = pd.read_csv(\"input_data/oa_pop_data.csv\")\npop_size = pop_size.set_index('OA')\n#rename column to \"population\"\npop_size = pop_size.rename(columns={'uk001001': 'population'})\npop_size = pop_size['population']\n\n#basic statistics of each cluster, number (perc of OAs) in each cluster and population\n\n#number of OAs in each cluster\ncluster_counts = supergrouped_variable_df['cluster'].value_counts().sort_index()\n#percentage of OAs in each cluster\ncluster_perc = (cluster_counts / cluster_counts.sum() * 100).round(2)\n\n#join pop_size to supergrouped_variable_df on index\nsupergrouped_variable_df_withpop = supergrouped_variable_df.join(pop_size, how='left')\n\n#pop in each cluster\ncluster_pop = supergrouped_variable_df_withpop.groupby('cluster')['population'].sum()\n#percentage of pop in each cluster\ncluster_pop_perc = (cluster_pop / cluster_pop.sum() * 100).round(2)\n\n#combine into a dataframe\ncluster_summary = pd.DataFrame({\n    'Number of OAs': cluster_counts,\n    'Percentage of OAs': cluster_perc,\n    'Population': cluster_pop,\n    'Percentage of Population': cluster_pop_perc\n})\ncluster_summary\n\n\n\n\n\n\n\n\nNumber of OAs\nPercentage of OAs\nPopulation\nPercentage of Population\n\n\ncluster\n\n\n\n\n\n\n\n\nA\n786\n14.95\n222681\n14.14\n\n\nB\n1644\n31.27\n504272\n32.03\n\n\nC\n784\n14.91\n236566\n15.03\n\n\nD\n1866\n35.49\n553594\n35.16\n\n\nE\n178\n3.39\n57327\n3.64"
  },
  {
    "objectID": "creatinggeodem.html#cluster-profiling",
    "href": "creatinggeodem.html#cluster-profiling",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Cluster Profiling",
    "text": "Cluster Profiling\nIndex scores are a way to summarise how a particular variable behaves within a cluster compared to the overall average. They help identify which characteristics are over- or under-represented in each cluster.\nIndex scores are calculated as follows:\n\\[\n\\text{Index Score} = \\left( \\frac{\\text{Mean of Variable in Cluster}}{\\text{Overall Mean of Variable}} \\right) \\times 100\n\\]\nWhere:\n\nMean of Variable in Cluster: the average value of the variable for all areas within the specific cluster.\n\nOverall Mean of Variable: the average value of the variable across all areas in the dataset.\n\nHere we will look only at variables used in the clustering. It can also be useful to look at variables not used in the clustering or from other data sources to help understand the clusters.\n\n# map encoding -&gt; human name\nencoding_to_name = dict(zip(var_lookup[\"No.\"], var_lookup[\"Variable_Name\"]))\n\nfeatures = [c for c in supergrouped_variable_df.columns if c != 'cluster']\n#dont average the cluster column\ncluster_means = supergrouped_variable_df.groupby('cluster').mean()\nglobal_means = supergrouped_variable_df[features].mean()\nglobal_stds = supergrouped_variable_df[features].std()\n\n# --- Calculate percentage difference ---\npct_diff = (cluster_means / global_means) * 100\n#drop columns with nan\npct_diff = pct_diff.dropna(axis=1, how='any')\npct_display_df = pct_diff.T  # index: encodings\n\n\n# --- Calculate percentage difference ---\npct_diff = (cluster_means / global_means) * 100\n#drop columns with nan\npct_diff = pct_diff.dropna(axis=1, how='any')\npct_display_df = pct_diff.T  # index: encodings\n\n# build customdata for hover (human names repeated across clusters)\nhuman_names = pct_display_df.index.map(lambda e: encoding_to_name.get(e, e)).values\ncustomdata_pct = np.tile(human_names.reshape(-1, 1), (1, pct_display_df.shape[1]))\n\n# get symmetric range around 100\nmax_abs = np.nanmax(np.abs(pct_display_df.values - 100))\n\n# --- Heatmap (percentage difference) ---d\nfig_pct = px.imshow(\n    pct_display_df,\n    color_continuous_scale=\"RdYlGn\",\n    origin=\"lower\",\n    aspect=\"auto\",\n    labels=dict(x=\"Cluster\", y=\"Feature (encoding)\", color=\"% of global mean\"),\n    zmin=0,\n    zmax=200\n)\n\n# attach customdata and set hover\nfig_pct.data[0].customdata = customdata_pct\nfig_pct.update_traces(\n    hovertemplate=\"Cluster: %{x}&lt;br&gt;Encoding: %{y}&lt;br&gt;Name: %{customdata}&lt;br&gt;% of Global Mean: %{z:.1f}%&lt;extra&gt;&lt;/extra&gt;\",\n    zmid=100  # centre colours on 100%\n)\n\nfig_pct.update_layout(\n    title=\"Cluster Profiles (% of Global Mean)\",\n    xaxis_title=\"Cluster\",\n    yaxis_title=\"Feature (encoding)\",\n    height=800\n)\n\nfig_pct.show()"
  },
  {
    "objectID": "creatinggeodem.html#llm-cluster-naming-and-description",
    "href": "creatinggeodem.html#llm-cluster-naming-and-description",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "LLM Cluster Naming (and description)",
    "text": "LLM Cluster Naming (and description)\nTo create a useful geodemographic classification, we need to assign meaningful names and descriptions to each cluster. This helps in interpreting the clusters and communicating their characteristics effectively. Traditionally, this is done manually by examining the statistical profiles of each cluster (often with input (as we produced) sometimes with external ) and using domain knowledge to assign names. Either done by a single expert, panel or utilising crowd sourcing approaches. Either way it is a time consuming process. However, we can leverage Large Language Models (LLMs) to assist in this process. We have demonstrated that LLMs can be used to generate initial name and description suggestions based on the statistical profiles of each cluster (Singleton and Spielman 2024). We can use LLMs to generate initial name and description suggestions based on the statistical profiles of each cluster. Again here we are using only the variables used in the clustering. It can also be useful to include other variables or external data to provide more context for the LLM.\n\nSingleton, Alex D., and Seth Spielman. 2024. “Segmentation Using Large Language Models: A New Typology of American Neighborhoods.” EPJ Data Science 13 (34). https://doi.org/10.1140/epjds/s13688-024-00466-1.\n\nUsing the OpenAI API\nBelow I use the OpenAI API, if you have an API key insert it in an .env file as; OPENAI_API_KEY=“sk….sA”\nIf you do have an API key skip the next cell and go to the cell where we will use a browser prompt to get the cluster names and descriptions.\n\n#get your OpenAI API key from environment variable\nopenai_api_key = os.getenv(\"OPENAI_API_KEY\")\nif not openai_api_key:\n    raise ValueError(\"Please set the OPENAI_API_KEY environment variable.\")\n\nclient = openai.OpenAI(api_key=openai_api_key)\n\n# -------------------------\n# JSON Schema for output\n# -------------------------\ncluster_schema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"name\": {\"type\": \"string\"},\n        \"description\": {\"type\": \"string\"},\n    },\n    \"required\": [\"name\", \"description\"],\n    \"additionalProperties\": False,\n}\n\n\nsystem_prompt = \"\"\"You are a geodemographic analyst. \nYour task is to produce commercial-style geodemographic cluster pen portraits \nand cluster names.\"\"\"\n\nuser_prompt = \"\"\"\nA geodemographics company is trying to explain the characteristics of several \nneighborhoods to a new customer. They present data comparing each \nneighborhood to the region average. A score of 100 means the neighborhood \nis equivalent to the regional average, 150 means one and a half times, 200 means twice, 50 means half, \nand 300 means three times the regional average. \n\nThe description of each neighborhood should focus on characteristics with scores above 120 or below 80. \nWrite in the third person, no more than 500 words. \nDo not mention the specific scores. Instead, describe patterns relative to the regional average (above/below). \n\nIn the style of a commercial geodemographic classification, create a cluster name that summarises the pen portrait. \nThe name should capture as many different characteristics as possible and be no more than 3 words.\n\"\"\"\n\n# -------------------------\n# Loop through clusters\n# -------------------------\ncluster_summaries = {}\nfor cluster in pct_diff.index:\n    cluster_pct = pct_diff.loc[cluster]\n\n    cluster_data = {\n        \"cluster\": cluster,\n        \"data\": {\n            encoding_to_name.get(feature, feature): round(value, 1)\n            for feature, value in cluster_pct.items()\n        },\n    }\n\n    response = client.responses.create(\n        model=\"gpt-5-mini\",\n        input=[\n            {\"role\": \"system\", \"content\": system_prompt.strip()},\n            {\"role\": \"user\", \"content\": user_prompt.strip()},\n            {\"role\": \"user\", \"content\": json.dumps(cluster_data)},\n        ],\n        text={\n            \"format\": {\n                \"type\": \"json_schema\",\n                \"name\": \"cluster_summary\",\n                \"schema\": cluster_schema,\n                \"strict\": True,\n            }\n        },\n    )\n\n    cluster_summary = json.loads(response.output_text)\n\n    # store under your cluster ID\n    cluster_summaries[cluster] = cluster_summary\n\ncluster_summaries\n\n\n\nPrompt for browser based LLM\nThe follow code cell generates a prompt for to be used in an LLM of your choice. Try it in your browser based LLM of choice (e.g. chatGPT, Claude, Gemini, etc)\nThe prompt should insure that the LLM produses the output in the correct format but this cannot beguaranteed.\n\n#print the prompt to copy and paste into a LLM to generate cluster descriptions\n\nprompt_intial = \"\"\"\nA geodemographics company is trying to explain the characteristics of several neighborhoods to a new customer. \nThey present data comparing each neighborhood to the region average. \nA score of 100 means the neighborhood is equivalent to the national average, \na score of 150 means the neighborhood is one and a half times the national average, \na score of 200 means the neighborhood is twice the national average, \na score of 50 means the neighborhood is half of the region average, \na score of 300 means the neighborhood is three times the region average. \n\nEach neighborhood has the following characteristics, described in #DATA# below. \nData are presented for each characteristic followed by a colon, and then a score. \nThe description of each neighborhood should focus on characteristics that have scores which are greater than 120 or less than 80.\nWrite a separate description for each cluster (Cluster A, Cluster B, Cluster C, Cluster D, etc. \nEach description should be written in the third person, in no more than 500 words. Do not mention the specific scores from the #DATA#. \nInstead, use descriptive words to illustrate rates that are above or below the regional average.\nMake comparisons to the regional average, do not talk in absolute terms.\n\"\"\"\n\nprompt_data =\"\"\n# print the index scores for each cluster in this format:\n\nfor cluster in pct_diff.index:\n    prompt_data += f\"\\n#DATA# cluster_key: {cluster}\\n\"\n    cluster_pct = pct_diff.loc[cluster]\n    for feature, value in cluster_pct.items():\n        feature_name = encoding_to_name.get(feature, feature)\n        prompt_data += f\"{feature_name}: {value:.1f}\\n\"\n\nprompt_struc = \"\"\"\nIn the style of a commercial geodemographic classification; create a cluster name \nthat would summarise the created geodemographic pen portraits. The names should capture as many \ndifferent characteristics contained within the description as possible. \nThe cluster name should be no more than 3 words.\nReturn your response in JSON format with the structure: {\"cluster_key_1\": {\"name\": \"\", \"description\": \"\"},\"cluster_key_2\": {\"name\": \"\", \"description\": \"\"},...}\"\"\"\n\nfull_prompt = prompt_intial + prompt_data + prompt_struc\nprint(full_prompt)\n\n\nA geodemographics company is trying to explain the characteristics of several neighborhoods to a new customer. \nThey present data comparing each neighborhood to the region average. \nA score of 100 means the neighborhood is equivalent to the national average, \na score of 150 means the neighborhood is one and a half times the national average, \na score of 200 means the neighborhood is twice the national average, \na score of 50 means the neighborhood is half of the region average, \na score of 300 means the neighborhood is three times the region average. \n\nEach neighborhood has the following characteristics, described in #DATA# below. \nData are presented for each characteristic followed by a colon, and then a score. \nThe description of each neighborhood should focus on characteristics that have scores which are greater than 120 or less than 80.\nWrite a separate description for each cluster (Cluster A, Cluster B, Cluster C, Cluster D, etc. \nEach description should be written in the third person, in no more than 500 words. Do not mention the specific scores from the #DATA#. \nInstead, use descriptive words to illustrate rates that are above or below the regional average.\nMake comparisons to the regional average, do not talk in absolute terms.\n\n#DATA# cluster_key: A\nUsual residents per square kilometre: 94.6\nAged 4 years and under: 86.8\nAged 5 - 14 years: 91.7\nAged 25 - 44 years: 95.9\nAged 45 - 64 years: 102.1\nAged 65 - 84 years: 110.8\nAged 85 years and over: 141.4\nCountry of birth: Europe: United Kingdom: 102.5\nCountry of birth: Europe: EU countries: 95.5\nCountry of birth: Europe: Non-EU countries: 96.3\nCountry of birth: Africa: 96.3\nEthnic group: Bangladeshi: 99.9\nEthnic group: Chinese: 105.1\nEthnic group: Indian: 111.3\nEthnic group: Pakistani: 81.1\nEthnic group: Other Asian: 86.2\nEthnic group: Black: 65.7\nEthnic group: Mixed or Multiple ethnic groups: 96.9\nEthnic group: White: 101.1\nCannot speak English well or at all: 65.7\nNo religion: 98.4\nChristian: 102.1\nOther religion: 105.4\nNever married and never registered a civil partnership: 91.3\nMarried or in a registered civil partnership: 102.9\nSeparated or divorced: 106.3\nOne-person household: 110.5\nFamilies with no children: 101.4\nFamilies with dependent children: 91.8\nAll household members have the same ethnic group: 92.7\nLives in a communal establishment: 214.0\nAddress 1 year ago is the same as the address of enumeration: 100.6\nDetached house or bungalow: 115.3\nSemi-detached house or bungalow: 96.9\nTerraced (including end-terrace) house or bungalow: 84.7\nFlat maisonette or apartment: 184.2\nOwnership or shared ownership: 104.0\nSocial rented: 90.9\nPrivate rented: 107.2\nSIR: 93.8\nProvides unpaid care: 100.1\n2 or more cars or vans in household: 103.3\nHighest level of qualification: Level 1- 2 or Apprenticeship: 97.3\nHighest level of qualification: Level 3 qualifications: 94.2\nHighest level of qualification: Level 4 qualifications or above: 111.5\nHours worked: Part-time: 95.9\nHours worked: Full-time: 101.9\nNS-SeC: L15 Full-time students: 87.1\nSOC: 1. Managers directors and senior officials: 112.2\nSOC: 2. Professional occupations: 109.7\nSOC: 3. Associate professional and technical occupations: 104.2\nSOC: 4. Administrative and secretarial occupations: 101.2\nSOC: 5. Skilled trades occupations: 96.2\nSOC: 6. Caring leisure and other service occupations: 94.3\nSOC: 7. Sales and customer service occupations: 90.6\nSOC: 8. Process plant and machine operatives: 87.7\nSOC: 9. Elementary occupations: 88.3\nEconomically active: Unemployed: 85.1\n\n#DATA# cluster_key: B\nUsual residents per square kilometre: 90.3\nAged 4 years and under: 94.8\nAged 5 - 14 years: 100.0\nAged 25 - 44 years: 95.9\nAged 45 - 64 years: 102.8\nAged 65 - 84 years: 108.6\nAged 85 years and over: 118.6\nCountry of birth: Europe: United Kingdom: 105.3\nCountry of birth: Europe: EU countries: 68.9\nCountry of birth: Europe: Non-EU countries: 60.8\nCountry of birth: Africa: 60.8\nEthnic group: Bangladeshi: 51.7\nEthnic group: Chinese: 81.0\nEthnic group: Indian: 92.7\nEthnic group: Pakistani: 60.4\nEthnic group: Other Asian: 55.9\nEthnic group: Black: 43.1\nEthnic group: Mixed or Multiple ethnic groups: 77.5\nEthnic group: White: 101.9\nCannot speak English well or at all: 34.9\nNo religion: 91.9\nChristian: 106.6\nOther religion: 69.6\nNever married and never registered a civil partnership: 83.5\nMarried or in a registered civil partnership: 110.6\nSeparated or divorced: 91.3\nOne-person household: 86.3\nFamilies with no children: 108.2\nFamilies with dependent children: 102.0\nAll household members have the same ethnic group: 109.6\nLives in a communal establishment: 56.0\nAddress 1 year ago is the same as the address of enumeration: 101.8\nDetached house or bungalow: 137.2\nSemi-detached house or bungalow: 116.2\nTerraced (including end-terrace) house or bungalow: 47.7\nFlat maisonette or apartment: 30.5\nOwnership or shared ownership: 111.7\nSocial rented: 39.7\nPrivate rented: 79.8\nSIR: 77.3\nProvides unpaid care: 102.7\n2 or more cars or vans in household: 117.8\nHighest level of qualification: Level 1- 2 or Apprenticeship: 100.7\nHighest level of qualification: Level 3 qualifications: 103.8\nHighest level of qualification: Level 4 qualifications or above: 113.0\nHours worked: Part-time: 95.7\nHours worked: Full-time: 102.3\nNS-SeC: L15 Full-time students: 94.1\nSOC: 1. Managers directors and senior officials: 113.9\nSOC: 2. Professional occupations: 109.8\nSOC: 3. Associate professional and technical occupations: 106.9\nSOC: 4. Administrative and secretarial occupations: 105.4\nSOC: 5. Skilled trades occupations: 100.9\nSOC: 6. Caring leisure and other service occupations: 90.8\nSOC: 7. Sales and customer service occupations: 91.8\nSOC: 8. Process plant and machine operatives: 90.5\nSOC: 9. Elementary occupations: 82.9\nEconomically active: Unemployed: 71.9\n\n#DATA# cluster_key: C\nUsual residents per square kilometre: 112.1\nAged 4 years and under: 110.8\nAged 5 - 14 years: 102.0\nAged 25 - 44 years: 105.6\nAged 45 - 64 years: 96.7\nAged 65 - 84 years: 88.3\nAged 85 years and over: 66.7\nCountry of birth: Europe: United Kingdom: 84.2\nCountry of birth: Europe: EU countries: 162.5\nCountry of birth: Europe: Non-EU countries: 206.1\nCountry of birth: Africa: 206.1\nEthnic group: Bangladeshi: 261.1\nEthnic group: Chinese: 173.0\nEthnic group: Indian: 155.8\nEthnic group: Pakistani: 279.9\nEthnic group: Other Asian: 235.5\nEthnic group: Black: 265.5\nEthnic group: Mixed or Multiple ethnic groups: 149.6\nEthnic group: White: 93.2\nCannot speak English well or at all: 280.0\nNo religion: 101.3\nChristian: 92.7\nOther religion: 130.2\nNever married and never registered a civil partnership: 116.0\nMarried or in a registered civil partnership: 90.3\nSeparated or divorced: 104.0\nOne-person household: 110.5\nFamilies with no children: 90.3\nFamilies with dependent children: 100.2\nAll household members have the same ethnic group: 89.3\nLives in a communal establishment: 88.1\nAddress 1 year ago is the same as the address of enumeration: 97.5\nDetached house or bungalow: 76.8\nSemi-detached house or bungalow: 81.4\nTerraced (including end-terrace) house or bungalow: 137.4\nFlat maisonette or apartment: 153.6\nOwnership or shared ownership: 84.8\nSocial rented: 144.4\nPrivate rented: 120.2\nSIR: 118.6\nProvides unpaid care: 95.2\n2 or more cars or vans in household: 78.5\nHighest level of qualification: Level 1- 2 or Apprenticeship: 97.2\nHighest level of qualification: Level 3 qualifications: 95.0\nHighest level of qualification: Level 4 qualifications or above: 93.6\nHours worked: Part-time: 107.4\nHours worked: Full-time: 96.2\nNS-SeC: L15 Full-time students: 114.8\nSOC: 1. Managers directors and senior officials: 85.1\nSOC: 2. Professional occupations: 92.2\nSOC: 3. Associate professional and technical occupations: 91.3\nSOC: 4. Administrative and secretarial occupations: 91.8\nSOC: 5. Skilled trades occupations: 96.9\nSOC: 6. Caring leisure and other service occupations: 107.4\nSOC: 7. Sales and customer service occupations: 107.6\nSOC: 8. Process plant and machine operatives: 108.6\nSOC: 9. Elementary occupations: 118.8\nEconomically active: Unemployed: 133.8\n\n#DATA# cluster_key: D\nUsual residents per square kilometre: 104.2\nAged 4 years and under: 109.8\nAged 5 - 14 years: 107.8\nAged 25 - 44 years: 102.2\nAged 45 - 64 years: 100.4\nAged 65 - 84 years: 96.9\nAged 85 years and over: 87.3\nCountry of birth: Europe: United Kingdom: 103.5\nCountry of birth: Europe: EU countries: 95.8\nCountry of birth: Europe: Non-EU countries: 68.5\nCountry of birth: Africa: 68.5\nEthnic group: Bangladeshi: 60.5\nEthnic group: Chinese: 64.4\nEthnic group: Indian: 57.9\nEthnic group: Pakistani: 45.2\nEthnic group: Other Asian: 76.2\nEthnic group: Black: 80.3\nEthnic group: Mixed or Multiple ethnic groups: 92.3\nEthnic group: White: 101.5\nCannot speak English well or at all: 86.7\nNo religion: 105.2\nChristian: 99.3\nOther religion: 100.9\nNever married and never registered a civil partnership: 108.3\nMarried or in a registered civil partnership: 96.6\nSeparated or divorced: 105.6\nOne-person household: 101.3\nFamilies with no children: 95.6\nFamilies with dependent children: 105.2\nAll household members have the same ethnic group: 102.2\nLives in a communal establishment: 52.9\nAddress 1 year ago is the same as the address of enumeration: 101.5\nDetached house or bungalow: 76.8\nSemi-detached house or bungalow: 101.4\nTerraced (including end-terrace) house or bungalow: 141.6\nFlat maisonette or apartment: 90.6\nOwnership or shared ownership: 97.1\nSocial rented: 137.6\nPrivate rented: 102.3\nSIR: 116.5\nProvides unpaid care: 101.9\n2 or more cars or vans in household: 94.9\nHighest level of qualification: Level 1- 2 or Apprenticeship: 105.4\nHighest level of qualification: Level 3 qualifications: 99.3\nHighest level of qualification: Level 4 qualifications or above: 83.8\nHours worked: Part-time: 102.8\nHours worked: Full-time: 99.2\nNS-SeC: L15 Full-time students: 99.6\nSOC: 1. Managers directors and senior officials: 89.7\nSOC: 2. Professional occupations: 89.1\nSOC: 3. Associate professional and technical occupations: 95.0\nSOC: 4. Administrative and secretarial occupations: 99.0\nSOC: 5. Skilled trades occupations: 104.8\nSOC: 6. Caring leisure and other service occupations: 109.1\nSOC: 7. Sales and customer service occupations: 107.8\nSOC: 8. Process plant and machine operatives: 113.5\nSOC: 9. Elementary occupations: 111.9\nEconomically active: Unemployed: 116.1\n\n#DATA# cluster_key: E\nUsual residents per square kilometre: 114.9\nAged 4 years and under: 56.6\nAged 5 - 14 years: 46.1\nAged 25 - 44 years: 109.3\nAged 45 - 64 years: 76.0\nAged 65 - 84 years: 57.4\nAged 85 years and over: 24.7\nCountry of birth: Europe: United Kingdom: 72.1\nCountry of birth: Europe: EU countries: 176.5\nCountry of birth: Europe: Non-EU countries: 341.1\nCountry of birth: Africa: 341.1\nEthnic group: Bangladeshi: 251.4\nEthnic group: Chinese: 304.9\nEthnic group: Indian: 312.4\nEthnic group: Pakistani: 331.1\nEthnic group: Other Asian: 221.0\nEthnic group: Black: 254.5\nEthnic group: Mixed or Multiple ethnic groups: 183.6\nEthnic group: White: 91.5\nCannot speak English well or at all: 199.8\nNo religion: 121.3\nChristian: 69.7\nOther religion: 214.2\nNever married and never registered a civil partnership: 133.2\nMarried or in a registered civil partnership: 67.7\nSeparated or divorced: 76.4\nOne-person household: 120.4\nFamilies with no children: 107.3\nFamilies with dependent children: 62.5\nAll household members have the same ethnic group: 68.2\nLives in a communal establishment: 549.3\nAddress 1 year ago is the same as the address of enumeration: 76.7\nDetached house or bungalow: 33.8\nSemi-detached house or bungalow: 32.2\nTerraced (including end-terrace) house or bungalow: 50.0\nFlat maisonette or apartment: 232.8\nOwnership or shared ownership: 72.0\nSocial rented: 107.7\nPrivate rented: 141.5\nSIR: 81.9\nProvides unpaid care: 75.3\n2 or more cars or vans in household: 68.9\nHighest level of qualification: Level 1- 2 or Apprenticeship: 61.3\nHighest level of qualification: Level 3 qualifications: 119.3\nHighest level of qualification: Level 4 qualifications or above: 127.0\nHours worked: Part-time: 95.8\nHours worked: Full-time: 96.2\nNS-SeC: L15 Full-time students: 150.6\nSOC: 1. Managers directors and senior officials: 90.8\nSOC: 2. Professional occupations: 116.1\nSOC: 3. Associate professional and technical occupations: 107.8\nSOC: 4. Administrative and secretarial occupations: 91.2\nSOC: 5. Skilled trades occupations: 71.4\nSOC: 6. Caring leisure and other service occupations: 82.2\nSOC: 7. Sales and customer service occupations: 102.8\nSOC: 8. Process plant and machine operatives: 62.1\nSOC: 9. Elementary occupations: 102.2\nEconomically active: Unemployed: 107.8\n\nIn the style of a commercial geodemographic classification; create a cluster name \nthat would summarise the created geodemographic pen portraits. The names should capture as many \ndifferent characteristics contained within the description as possible. \nThe cluster name should be no more than 3 words.\nReturn your response in JSON format with the structure: {\"cluster_key_1\": {\"name\": \"\", \"description\": \"\"},\"cluster_key_2\": {\"name\": \"\", \"description\": \"\"},...}\n\n\n\n\nCopy result in here;\n\ncluster_summaries = {\n  \"A\": {\n    \"name\": \"Elderly Communal Flats\",\n    \"description\": \"Cluster A neighborhoods feature a notably higher proportion of very elderly residents compared to the regional average. They also have significantly more individuals living in communal establishments than typical in the region. Housing in these areas shows a markedly elevated presence of flats, maisonettes, or apartments relative to the regional norm. On the demographic side, these neighborhoods exhibit substantially lower representation of Black ethnic groups than the regional average. Additionally, the rate of residents who cannot speak English well or at all is considerably below the regional average, indicating better overall English proficiency among the population.\"\n  },\n  \"B\": {\n    \"name\": \"Affluent Rural Suburban\",\n    \"description\": \"Cluster B neighborhoods are characterized by a significantly higher prevalence of detached houses compared to the regional average, suggesting a more spacious and possibly rural or suburban housing landscape. These areas have notably fewer residents born in EU countries, non-EU European countries, or Africa than the regional norm, pointing to lower levels of international migration. Ethnically, they show substantially reduced proportions of Bangladeshi, Pakistani, other Asian, Black, and mixed or multiple ethnic groups relative to the regional average. The rate of individuals who cannot speak English well or at all is markedly lower than typical, implying stronger English language skills across the population. Religious diversity is less pronounced, with other religions represented at a considerably lower rate than the region. Household structures lean towards fewer one-person households and more families without children, but the standout is a dramatically reduced presence of communal living establishments. Housing types reflect fewer terraced houses, flats, maisonettes, or apartments, as well as substantially lower social and private renting compared to the regional average. Health indicators, such as standardized illness ratios, are better than the regional norm, indicating lower illness rates. Unemployment is also notably below the regional average, contributing to a more stable economic environment.\"\n  },\n  \"C\": {\n    \"name\": \"Diverse Urban Renters\",\n    \"description\": \"Cluster C neighborhoods stand out with significantly higher proportions of residents born in EU countries, non-EU European countries, and Africa compared to the regional average, reflecting substantial international diversity. Ethnically, these areas have markedly elevated representations of Bangladeshi, Chinese, Indian, Pakistani, other Asian, Black, and mixed or multiple ethnic groups relative to the regional norm, while White ethnic groups are somewhat less prominent. The rate of residents who cannot speak English well or at all is considerably above the regional average, suggesting challenges in language proficiency. Other religions are more common than typical in the region. Housing features a notably higher presence of terraced houses, including end-terraces, and flats, maisonettes, or apartments compared to the average. Tenure shows elevated levels of social renting and private renting beyond the regional norm, with ownership or shared ownership being less prevalent. Vehicle ownership is lower, with fewer households having two or more cars or vans than the regional average. Unemployment rates are substantially higher than the region, indicating potential economic pressures. Additionally, the proportion of very elderly residents is below the regional average, contributing to a younger demographic tilt.\"\n  },\n  \"D\": {\n    \"name\": \"Working-Class Terraced Renters\",\n    \"description\": \"Cluster D neighborhoods exhibit significantly lower proportions of residents born in non-EU European countries and Africa compared to the regional average, indicating reduced international origins from these areas. Ethnically, representations of Bangladeshi, Chinese, Indian, Pakistani, and other Asian groups are markedly below the regional norm. Living arrangements show fewer individuals in communal establishments than typical. Housing types feature a notably higher presence of terraced houses, including end-terraces, relative to the average, while detached houses or bungalows are less common. Social renting is elevated beyond the regional norm. Health indicators like standardized illness ratios are somewhat higher than average, suggesting more health challenges, though not drastically so. Unemployment is also above the regional average, pointing to economic vulnerabilities.\"\n  },\n  \"E\": {\n    \"name\": \"Transient Cosmopolitan Students\",\n    \"description\": \"Cluster E neighborhoods are distinguished by substantially higher proportions of residents born in EU countries, non-EU European countries, and Africa compared to the regional average, highlighting intense global diversity. Ethnically, these areas feature markedly elevated representations of Bangladeshi, Chinese, Indian, Pakistani, other Asian, Black, and mixed or multiple ethnic groups relative to the norm. The rate of individuals who cannot speak English well or at all is significantly above average, indicating notable language barriers. Religiously, no religion is more prevalent, while Christianity is considerably less common, and other religions are much more represented than in the region. Marital status shows higher rates of never married individuals and lower rates of married or civil partnered residents, as well as fewer separated or divorced. Households have more one-person setups and fewer with dependent children compared to the average, with substantially reduced instances of all members sharing the same ethnic group. Communal establishments are dramatically more common, and residential stability is lower, with fewer people living at the same address as the previous year. Housing leans heavily towards flats, maisonettes, or apartments at rates far above the regional norm, while detached, semi-detached, and terraced houses are all significantly less prevalent. Ownership is below average, but private renting is notably higher. Demographically, proportions of young children, school-aged children, middle-aged adults, and elderly residents are all markedly lower than the region, creating a younger adult focus. Provision of unpaid care is less common. Vehicle ownership is reduced, with fewer households having two or more cars. Educationally, highest qualifications at level 1-2 or apprenticeship are below average, but level 4 or above are higher, alongside a substantially elevated full-time student population. Occupationally, skilled trades and process plant/machine operatives are less represented than the regional average.\"\n  }\n}\ncluster_descriptions_df = pd.DataFrame.from_dict(cluster_summaries, orient='index')\n\n\n#pretty print the descriptions (break lines for readability)\nfor cluster, row in cluster_descriptions_df.iterrows():\n    print(f\"Cluster {cluster} - {row['name']}:\\n\")\n    description = row['description']\n    #break into lines of max 80 characters\n    import textwrap\n    wrapped_description = textwrap.fill(description, width=70)\n    print(wrapped_description, \"\\n\\n\")\n\nCluster A - Elderly Communal Flats:\n\nCluster A neighborhoods feature a notably higher proportion of very\nelderly residents compared to the regional average. They also have\nsignificantly more individuals living in communal establishments than\ntypical in the region. Housing in these areas shows a markedly\nelevated presence of flats, maisonettes, or apartments relative to the\nregional norm. On the demographic side, these neighborhoods exhibit\nsubstantially lower representation of Black ethnic groups than the\nregional average. Additionally, the rate of residents who cannot speak\nEnglish well or at all is considerably below the regional average,\nindicating better overall English proficiency among the population. \n\n\nCluster B - Affluent Rural Suburban:\n\nCluster B neighborhoods are characterized by a significantly higher\nprevalence of detached houses compared to the regional average,\nsuggesting a more spacious and possibly rural or suburban housing\nlandscape. These areas have notably fewer residents born in EU\ncountries, non-EU European countries, or Africa than the regional\nnorm, pointing to lower levels of international migration. Ethnically,\nthey show substantially reduced proportions of Bangladeshi, Pakistani,\nother Asian, Black, and mixed or multiple ethnic groups relative to\nthe regional average. The rate of individuals who cannot speak English\nwell or at all is markedly lower than typical, implying stronger\nEnglish language skills across the population. Religious diversity is\nless pronounced, with other religions represented at a considerably\nlower rate than the region. Household structures lean towards fewer\none-person households and more families without children, but the\nstandout is a dramatically reduced presence of communal living\nestablishments. Housing types reflect fewer terraced houses, flats,\nmaisonettes, or apartments, as well as substantially lower social and\nprivate renting compared to the regional average. Health indicators,\nsuch as standardized illness ratios, are better than the regional\nnorm, indicating lower illness rates. Unemployment is also notably\nbelow the regional average, contributing to a more stable economic\nenvironment. \n\n\nCluster C - Diverse Urban Renters:\n\nCluster C neighborhoods stand out with significantly higher\nproportions of residents born in EU countries, non-EU European\ncountries, and Africa compared to the regional average, reflecting\nsubstantial international diversity. Ethnically, these areas have\nmarkedly elevated representations of Bangladeshi, Chinese, Indian,\nPakistani, other Asian, Black, and mixed or multiple ethnic groups\nrelative to the regional norm, while White ethnic groups are somewhat\nless prominent. The rate of residents who cannot speak English well or\nat all is considerably above the regional average, suggesting\nchallenges in language proficiency. Other religions are more common\nthan typical in the region. Housing features a notably higher presence\nof terraced houses, including end-terraces, and flats, maisonettes, or\napartments compared to the average. Tenure shows elevated levels of\nsocial renting and private renting beyond the regional norm, with\nownership or shared ownership being less prevalent. Vehicle ownership\nis lower, with fewer households having two or more cars or vans than\nthe regional average. Unemployment rates are substantially higher than\nthe region, indicating potential economic pressures. Additionally, the\nproportion of very elderly residents is below the regional average,\ncontributing to a younger demographic tilt. \n\n\nCluster D - Working-Class Terraced Renters:\n\nCluster D neighborhoods exhibit significantly lower proportions of\nresidents born in non-EU European countries and Africa compared to the\nregional average, indicating reduced international origins from these\nareas. Ethnically, representations of Bangladeshi, Chinese, Indian,\nPakistani, and other Asian groups are markedly below the regional\nnorm. Living arrangements show fewer individuals in communal\nestablishments than typical. Housing types feature a notably higher\npresence of terraced houses, including end-terraces, relative to the\naverage, while detached houses or bungalows are less common. Social\nrenting is elevated beyond the regional norm. Health indicators like\nstandardized illness ratios are somewhat higher than average,\nsuggesting more health challenges, though not drastically so.\nUnemployment is also above the regional average, pointing to economic\nvulnerabilities. \n\n\nCluster E - Transient Cosmopolitan Students:\n\nCluster E neighborhoods are distinguished by substantially higher\nproportions of residents born in EU countries, non-EU European\ncountries, and Africa compared to the regional average, highlighting\nintense global diversity. Ethnically, these areas feature markedly\nelevated representations of Bangladeshi, Chinese, Indian, Pakistani,\nother Asian, Black, and mixed or multiple ethnic groups relative to\nthe norm. The rate of individuals who cannot speak English well or at\nall is significantly above average, indicating notable language\nbarriers. Religiously, no religion is more prevalent, while\nChristianity is considerably less common, and other religions are much\nmore represented than in the region. Marital status shows higher rates\nof never married individuals and lower rates of married or civil\npartnered residents, as well as fewer separated or divorced.\nHouseholds have more one-person setups and fewer with dependent\nchildren compared to the average, with substantially reduced instances\nof all members sharing the same ethnic group. Communal establishments\nare dramatically more common, and residential stability is lower, with\nfewer people living at the same address as the previous year. Housing\nleans heavily towards flats, maisonettes, or apartments at rates far\nabove the regional norm, while detached, semi-detached, and terraced\nhouses are all significantly less prevalent. Ownership is below\naverage, but private renting is notably higher. Demographically,\nproportions of young children, school-aged children, middle-aged\nadults, and elderly residents are all markedly lower than the region,\ncreating a younger adult focus. Provision of unpaid care is less\ncommon. Vehicle ownership is reduced, with fewer households having two\nor more cars. Educationally, highest qualifications at level 1-2 or\napprenticeship are below average, but level 4 or above are higher,\nalongside a substantially elevated full-time student population.\nOccupationally, skilled trades and process plant/machine operatives\nare less represented than the regional average."
  },
  {
    "objectID": "creatinggeodem.html#save-results",
    "href": "creatinggeodem.html#save-results",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Save results",
    "text": "Save results\nLets save the results to file for use in GIS software or to format for sharing.\n\ncluster_descriptions_df.to_csv(\"outputs/cluster_descriptions.csv\")\ngdf = oas_region.merge(supergrouped_variable_df, left_index=True, right_index=True, how='left')\n#save to gpkg\ngdf.to_file(\"outputs/clustered_geodataframe.gpkg\", layer=\"clusters\", driver=\"GPKG\")"
  },
  {
    "objectID": "creatinggeodem.html#selecting-the-number-of-subclusters-for-each-supergroup-using-clustergrams",
    "href": "creatinggeodem.html#selecting-the-number-of-subclusters-for-each-supergroup-using-clustergrams",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Selecting the number of subclusters for each supergroup using Clustergrams",
    "text": "Selecting the number of subclusters for each supergroup using Clustergrams\n\ndef create_subcluster_clustergrams(output_df, num_clusters, n_init=1):\n    \"\"\"\n    Generate and save clustergrams for each supercluster.\n    This function loops through the existing clusters and creates a clustergram \n    for each\n    Parameters:\n    output_df (pd.DataFrame): DataFrame containing cluster assignments.\n    num_clusters (int): The total number of clusters to iterate over.\n    n_init (int, optional): Number of times K-means runs with different centroid seeds.\n                            Defaults to 1 for quick testing.\n\n    \"\"\"\n    save_dir = \"outputs/plots\" #directory to save the clustergrams\n    os.makedirs(save_dir, exist_ok=True)  # Ensure save directory exists\n    cluster_labels = np.sort(output_df[\"cluster\"].unique())\n    print(cluster_labels)\n    for cluster_label in cluster_labels:\n        # Select rows corresponding to the current cluster, dropping the 'cluster' column\n        cluster_df = output_df.query(\"cluster == @cluster_label\").drop(columns='cluster')\n\n        print(f\"Cluster: {cluster_label,cluster_summaries[cluster_label][\"name\"]}, {len(cluster_df)} geographies in cluster\")\n\n        if cluster_df.empty:\n            print(f\"Skipping cluster {cluster_label} as it has no data.\")\n            continue\n\n        # Define save location\n        save_loc = os.path.join(save_dir, f\"subcluster_clustergram_cluster{cluster_label}.png\")\n        print(f\"Saving clustergram to {save_loc}\")\n\n        # Generate clustergram\n        create_clustergram(cluster_df, n_init=n_init, save_loc=save_loc)\n\n# Example usage\ncreate_subcluster_clustergrams(supergrouped_variable_df, num_clusters, n_init=1)\n\n\n['A' 'B' 'C' 'D' 'E']\nCluster: ('A', 'Elderly Communal Flats'), 786 geographies in cluster\nSaving clustergram to outputs/plots/subcluster_clustergram_clusterA.png\n\n\n\n\n\n\n\n\n\nCluster: ('B', 'Affluent Rural Suburban'), 1644 geographies in cluster\nSaving clustergram to outputs/plots/subcluster_clustergram_clusterB.png\n\n\n\n\n\n\n\n\n\nCluster: ('C', 'Diverse Urban Renters'), 784 geographies in cluster\nSaving clustergram to outputs/plots/subcluster_clustergram_clusterC.png\n\n\n\n\n\n\n\n\n\nCluster: ('D', 'Working-Class Terraced Renters'), 1866 geographies in cluster\nSaving clustergram to outputs/plots/subcluster_clustergram_clusterD.png\n\n\n\n\n\n\n\n\n\nCluster: ('E', 'Transient Cosmopolitan Students'), 178 geographies in cluster\nSaving clustergram to outputs/plots/subcluster_clustergram_clusterE.png"
  },
  {
    "objectID": "creatinggeodem.html#run-the-subclustering",
    "href": "creatinggeodem.html#run-the-subclustering",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Run the subclustering",
    "text": "Run the subclustering\nWe can now select the number of subclusters to split each of the supergroups into using the clustergrams above. The length of the list must match num_clusters (the number of supergroups).\n\nsubcluster_nums = [2, 3, 3, 2, 2]\n\n\n\ndef run_subclustering(input_df: pd.DataFrame, subcluster_nums: list, num_clusters: int, n_init: int = 1) -&gt; pd.DataFrame:\n    \"\"\"\n    Runs subclustering for each supergroup using KMeans and returns a modified DataFrame with subcluster labels.\n    \n    Parameters:\n    - output_df (pd.DataFrame): The original DataFrame containing data and cluster assignments.\n    - subcluster_nums (list): A list specifying the number of subclusters to split each supergroup into.\n    - num_clusters (int): The total number of supergroups.\n    - n_init (int, optional): The number of times KMeans will be initialized. Defaults to 1.\n\n    Returns:\n    - pd.DataFrame: A new the output dataFrame with an added 'subcluster' column.\n    \"\"\"\n\n    cluster_labels = np.sort(input_df[\"cluster\"].unique())\n    print(f\"Cluster labels found: {cluster_labels}\")\n    if len(subcluster_nums) != len(cluster_labels):\n        raise ValueError(f\"Length of subcluster_nums ({len(subcluster_nums)}) does not match num_clusters ({len(cluster_labels)}).\")\n\n    # Work on a copy of the DataFrame to prevent unintended modifications\n    df = input_df.copy()\n\n    for cluster, num_subclusters in zip(cluster_labels, subcluster_nums):\n        print(f\"Clustering supergroup {cluster,cluster_summaries[cluster][\"name\"]} into {num_subclusters} subclusters.\")\n\n        # Select rows corresponding to the current cluster, drop the cluster column before clustering\n        cluster_df = input_df.query(\"cluster == @cluster\").drop(columns='cluster').copy()\n        # Run KMeans clustering for the selected supergroup\n        subcluster_output_df = run_kmeans(\n            cluster_df, \n            num_subclusters, \n            n_init=n_init, \n            output_filepath=f\"outputs/subclusters/supergroup{cluster}_subclusteroutput.csv\"\n        )\n\n        # Combine anems\n        subcluster_output_df['subcluster'] = [str(cluster) + str(i) for i in subcluster_output_df['cluster']]\n\n        # Update the modified DataFrame with subclustering results\n        df.loc[cluster_df.index, 'subcluster'] = subcluster_output_df['subcluster']\n\n    # Save the final output\n    df.to_csv(\"outputs/subgroups_clusteroutput.csv\")\n    print(\"Final output saved to outputs/subgroups_clusteroutput.csv\")\n\n    return df  # Return the modified DataFrame with clusters and subclusters\nsubgrouped_variable_df = run_subclustering(supergrouped_variable_df, subcluster_nums, num_clusters=num_clusters, n_init=1)\n\nCluster labels found: ['A' 'B' 'C' 'D' 'E']\nClustering supergroup ('A', 'Elderly Communal Flats') into 2 subclusters.\nClustering supergroup ('B', 'Affluent Rural Suburban') into 3 subclusters.\nClustering supergroup ('C', 'Diverse Urban Renters') into 3 subclusters.\nClustering supergroup ('D', 'Working-Class Terraced Renters') into 2 subclusters.\nClustering supergroup ('E', 'Transient Cosmopolitan Students') into 2 subclusters.\nFinal output saved to outputs/subgroups_clusteroutput.csv"
  },
  {
    "objectID": "creatinggeodem.html#visualise-and-save-the-results",
    "href": "creatinggeodem.html#visualise-and-save-the-results",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Visualise and save the results",
    "text": "Visualise and save the results\n\n# --- Calculate percentage difference (subclusters vs cluster means) ---\n\n# cluster means for reference\ncluster_means = subgrouped_variable_df.groupby(\"cluster\").mean(numeric_only=True)\nglobal_means = subgrouped_variable_df[features].mean()\n# subcluster means\nsubcluster_means = subgrouped_variable_df.groupby([\"cluster\", \"subcluster\"]).mean(numeric_only=True)\n\n# percentage difference: subcluster relative to parent cluster\npct_diff_sub = (subcluster_means / cluster_means) * 100\npct_diff_sub = (subcluster_means/ global_means)*100\npct_display_df_sub = pct_diff_sub.T  # index = features (encodings), columns = MultiIndex (cluster, subcluster)\n#replace the column MultiIndex with a single level index with \"cluster-subcluster\" format and swap in the cluster names from cluster_summaries\n# pct_display_df_sub.columns = [f\"{c[0]}-{c[1]}\" for c in pct_display_df_sub.columns]\npct_display_df_sub.columns = [f\"{cluster_summaries[c[0]]['name']}-{c[1]}\" for c in pct_display_df_sub.columns]\n\n# pct_display_df_sub.columns = [f\"{c[0]}-{c[1]}\" for c in pct_display_df_sub.columns]\n\n# build customdata for hover (human names repeated across cluster–subcluster combos)\nhuman_names = pct_display_df_sub.index.map(lambda e: encoding_to_name.get(e, e)).values\ncustomdata_pct_sub = np.tile(human_names.reshape(-1, 1), (1, pct_display_df_sub.shape[1]))\n\n# get symmetric range around 100\nmax_abs_sub = np.nanmax(np.abs(pct_display_df_sub.values - 100))\n\n# --- Heatmap (percentage difference: subcluster vs cluster mean) ---\nfig_pct_sub = px.imshow(\n    pct_display_df_sub,\n    color_continuous_scale=\"RdYlGn\",\n    origin=\"lower\",\n    aspect=\"auto\",\n    labels=dict(x=\"Subcluster\", y=\"Feature (encoding)\", color=\"% of cluster mean\"),\n    zmin=0,\n    zmax=200\n)\n\n# attach customdata and set hover\nfig_pct_sub.data[0].customdata = customdata_pct_sub\nfig_pct_sub.update_traces(\n    hovertemplate=\"Subcluster: %{x}&lt;br&gt;Encoding: %{y}&lt;br&gt;Name: %{customdata}&lt;br&gt;% of Cluster Mean: %{z:.1f}%&lt;extra&gt;&lt;/extra&gt;\",\n    zmid=100  # centre colours on 100%\n)\n\nfig_pct_sub.update_layout(\n    title=\"Subcluster Profiles (% of Cluster Mean)\",\n    xaxis_title=\"Subcluster\",\n    yaxis_title=\"Feature (encoding)\",\n    height=800\n)\n\n# get mapping of column → cluster\ncol_clusters = [col.split(\"-\")[0] for col in pct_display_df_sub.columns]\n\n# find where cluster changes (between adjacent columns)\nboundaries = [\n    i + 0.5 for i in range(len(col_clusters) - 1)\n    if col_clusters[i] != col_clusters[i + 1]\n]\n\n# add vertical lines at these boundaries\nfor b in boundaries:\n    fig_pct_sub.add_vline(\n        x=b, line_width=2, line_dash=\"dash\", line_color=\"black\"\n    )\n\nfig_pct_sub.show()\n\n                            \n                                            \n\n\nSave the results to file for use in GIS software or to format for sharing:\n\n#merge the geometry column from oas_region to subgrouped_variable_df to make a geodataframe\ngdf = oas_region.merge(subgrouped_variable_df  , left_index=True, right_index=True, how='left')\n#save to file\ngdf.to_file(\"outputs/subclusters_geodataframe.gpkg\", layer='subclusters', driver=\"GPKG\")"
  },
  {
    "objectID": "creatinggeodem.html#map-the-subclusters",
    "href": "creatinggeodem.html#map-the-subclusters",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Map the subclusters",
    "text": "Map the subclusters"
  }
]