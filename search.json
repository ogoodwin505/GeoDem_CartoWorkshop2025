[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Geographic Data Service Tutorials",
    "section": "",
    "text": "Explore the following tutorials directly from this page:\n\nCreating Cutting-Edge Geodemographic Classifications from Scratch in Python"
  },
  {
    "objectID": "index.html#tutorials",
    "href": "index.html#tutorials",
    "title": "Geographic Data Service Tutorials",
    "section": "",
    "text": "Explore the following tutorials directly from this page:\n\nCreating Cutting-Edge Geodemographic Classifications from Scratch in Python"
  },
  {
    "objectID": "proto_notebooks/hacktogethervar.html",
    "href": "proto_notebooks/hacktogethervar.html",
    "title": "Geographic Data Service Tutorials",
    "section": "",
    "text": "#load the census data\nimport pandas as pd\nimport geopandas as gpd\n\nvariable_df = pd.read_parquet(\"input_data/uk_census_data.parquet\")\n#load the uk table from other dir\nrep_variable_df = pd.read_csv(\"../UK_Census_Data_21_22/data/uk_census_data/normalised_retotalled_topic_tables/csv/uk004.csv\")\n\n\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[1], line 5\n      2 import pandas as pd\n      3 import geopandas as gpd\n----&gt; 5 variable_df = pd.read_parquet(\"input_data/uk_census_data.parquet\")\n      6 #load the uk table from other dir\n      7 rep_variable_df = pd.read_csv(\"../UK_Census_Data_21_22/data/uk_census_data/normalised_retotalled_topic_tables/csv/uk004.csv\")\n\nFile ~/projects/GeoDem_CartoWorkshop2025/.venv/lib/python3.12/site-packages/pandas/io/parquet.py:669, in read_parquet(path, engine, columns, storage_options, use_nullable_dtypes, dtype_backend, filesystem, filters, **kwargs)\n    666     use_nullable_dtypes = False\n    667 check_dtype_backend(dtype_backend)\n--&gt; 669 return impl.read(\n    670     path,\n    671     columns=columns,\n    672     filters=filters,\n    673     storage_options=storage_options,\n    674     use_nullable_dtypes=use_nullable_dtypes,\n    675     dtype_backend=dtype_backend,\n    676     filesystem=filesystem,\n    677     **kwargs,\n    678 )\n\nFile ~/projects/GeoDem_CartoWorkshop2025/.venv/lib/python3.12/site-packages/pandas/io/parquet.py:258, in PyArrowImpl.read(self, path, columns, filters, use_nullable_dtypes, dtype_backend, storage_options, filesystem, **kwargs)\n    256 if manager == \"array\":\n    257     to_pandas_kwargs[\"split_blocks\"] = True\n--&gt; 258 path_or_handle, handles, filesystem = _get_path_or_handle(\n    259     path,\n    260     filesystem,\n    261     storage_options=storage_options,\n    262     mode=\"rb\",\n    263 )\n    264 try:\n    265     pa_table = self.api.parquet.read_table(\n    266         path_or_handle,\n    267         columns=columns,\n   (...)    270         **kwargs,\n    271     )\n\nFile ~/projects/GeoDem_CartoWorkshop2025/.venv/lib/python3.12/site-packages/pandas/io/parquet.py:141, in _get_path_or_handle(path, fs, storage_options, mode, is_dir)\n    131 handles = None\n    132 if (\n    133     not fs\n    134     and not is_dir\n   (...)    139     # fsspec resources can also point to directories\n    140     # this branch is used for example when reading from non-fsspec URLs\n--&gt; 141     handles = get_handle(\n    142         path_or_handle, mode, is_text=False, storage_options=storage_options\n    143     )\n    144     fs = None\n    145     path_or_handle = handles.handle\n\nFile ~/projects/GeoDem_CartoWorkshop2025/.venv/lib/python3.12/site-packages/pandas/io/common.py:882, in get_handle(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\n    873         handle = open(\n    874             handle,\n    875             ioargs.mode,\n   (...)    878             newline=\"\",\n    879         )\n    880     else:\n    881         # Binary mode\n--&gt; 882         handle = open(handle, ioargs.mode)\n    883     handles.append(handle)\n    885 # Convert BytesIO or file objects passed with an encoding\n\nFileNotFoundError: [Errno 2] No such file or directory: 'input_data/uk_census_data.parquet'\n\n\n\n\nvariable_df \n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[2], line 1\n----&gt; 1 variable_df \n\nNameError: name 'variable_df' is not defined\n\n\n\n\nrep_variable_df\nuk004005 non-en\nuk004006 aftica\n\n\n  Cell In[3], line 2\n    uk004005 non-en\n             ^\nSyntaxError: invalid syntax"
  },
  {
    "objectID": "proto_notebooks/postcodemap.html",
    "href": "proto_notebooks/postcodemap.html",
    "title": "Geographic Data Service Tutorials",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport geopandas as gpd\nfrom sklearn.cluster import KMeans\nfrom clustergram import Clustergram\nimport matplotlib.pyplot as plt\nimport os\n\nfrom keplergl import KeplerGl\nimport umap.umap_ as umap\nimport plotly.express as px\nfrom matplotlib import colors as mcolors\nimport seaborn as sns\nimport openai\nimport json\n\n#set a  random seed for reproducibility\nrandom_seed = 507\n\n#check that outputs directories exists (if not create it), this is important if you are running the notebook in colab\n\nif not os.path.exists('outputs'):\n    os.makedirs('outputs')\nif not os.path.exists('outputs/maps'):\n    os.makedirs('outputs/maps')\nif not os.path.exists('outputs/plots'):\n    os.makedirs('outputs/plots')\nif not os.path.exists('outputs/subclusters'):\n    os.makedirs('outputs/subclusters')\n\n\n#load oa boundaries\n\n\n#opne uprn data\noab = gpd.read_file(\"original_inputs/boundaries/Output_Areas_2021_EW_BFC_V8_-393965239550753877.gpkg\")\noab = oab.rename(columns={\"OA21CD\": \"OA\"})[[\"OA\", \"geometry\"]]\noab = oab.to_crs(epsg=4326)\nuprn = pd.read_parquet(\"livuprn.parquet\")\npostcodes = pd.read_csv(\"NSUL_FEB_2023_NW.csv\", usecols=[\"UPRN\", \"PCDS\",\"OA21CD\"])\n\n#join the two dataframes on UPRN\nuprn = uprn.merge(postcodes, on=\"UPRN\", how=\"left\")\n\n#convert to geodataframe (already a geometry column)\nuprn = gpd.GeoDataFrame(uprn,crs=\"EPSG:4326\", geometry=gpd.points_from_xy(uprn.LONGITUDE, uprn.LATITUDE))\n\n#bbx for liverpool \nuprn = uprn.cx[-3.00:-2.9, 53.4:53.45]\noab = oab.cx[-3.00:-2.9, 53.4:53.45]\n\n# #tighter bb 53.4174,53.4171 -2.9578855, -2.95757115\nuprn = uprn.cx[-2.97:-2.94, 53.40:53.43]\noab = oab.cx[-2.97:-2.94, 53.40:53.43]\n\n\n---------------------------------------------------------------------------\nDataSourceError                           Traceback (most recent call last)\nCell In[3], line 2\n      1 #opne uprn data\n----&gt; 2 oab = gpd.read_file(\"original_inputs/boundaries/Output_Areas_2021_EW_BFC_V8_-393965239550753877.gpkg\")\n      3 oab = oab.rename(columns={\"OA21CD\": \"OA\"})[[\"OA\", \"geometry\"]]\n      4 oab = oab.to_crs(epsg=4326)\n\nFile ~/projects/GeoDem_CartoWorkshop2025/.venv/lib/python3.12/site-packages/geopandas/io/file.py:316, in _read_file(filename, bbox, mask, columns, rows, engine, **kwargs)\n    313             filename = response.read()\n    315 if engine == \"pyogrio\":\n--&gt; 316     return _read_file_pyogrio(\n    317         filename, bbox=bbox, mask=mask, columns=columns, rows=rows, **kwargs\n    318     )\n    320 elif engine == \"fiona\":\n    321     if pd.api.types.is_file_like(filename):\n\nFile ~/projects/GeoDem_CartoWorkshop2025/.venv/lib/python3.12/site-packages/geopandas/io/file.py:576, in _read_file_pyogrio(path_or_bytes, bbox, mask, rows, **kwargs)\n    567     warnings.warn(\n    568         \"The 'include_fields' and 'ignore_fields' keywords are deprecated, and \"\n    569         \"will be removed in a future release. You can use the 'columns' keyword \"\n   (...)    572         stacklevel=3,\n    573     )\n    574     kwargs[\"columns\"] = kwargs.pop(\"include_fields\")\n--&gt; 576 return pyogrio.read_dataframe(path_or_bytes, bbox=bbox, **kwargs)\n\nFile ~/projects/GeoDem_CartoWorkshop2025/.venv/lib/python3.12/site-packages/pyogrio/geopandas.py:275, in read_dataframe(path_or_buffer, layer, encoding, columns, read_geometry, force_2d, skip_features, max_features, where, bbox, mask, fids, sql, sql_dialect, fid_as_index, use_arrow, on_invalid, arrow_to_pandas_kwargs, **kwargs)\n    270 if not use_arrow:\n    271     # For arrow, datetimes are read as is.\n    272     # For numpy IO, datetimes are read as string values to preserve timezone info\n    273     # as numpy does not directly support timezones.\n    274     kwargs[\"datetime_as_string\"] = True\n--&gt; 275 result = read_func(\n    276     path_or_buffer,\n    277     layer=layer,\n    278     encoding=encoding,\n    279     columns=columns,\n    280     read_geometry=read_geometry,\n    281     force_2d=gdal_force_2d,\n    282     skip_features=skip_features,\n    283     max_features=max_features,\n    284     where=where,\n    285     bbox=bbox,\n    286     mask=mask,\n    287     fids=fids,\n    288     sql=sql,\n    289     sql_dialect=sql_dialect,\n    290     return_fids=fid_as_index,\n    291     **kwargs,\n    292 )\n    294 if use_arrow:\n    295     import pyarrow as pa\n\nFile ~/projects/GeoDem_CartoWorkshop2025/.venv/lib/python3.12/site-packages/pyogrio/raw.py:198, in read(path_or_buffer, layer, encoding, columns, read_geometry, force_2d, skip_features, max_features, where, bbox, mask, fids, sql, sql_dialect, return_fids, datetime_as_string, **kwargs)\n     59 \"\"\"Read OGR data source into numpy arrays.\n     60 \n     61 IMPORTANT: non-linear geometry types (e.g., MultiSurface) are converted\n   (...)    194 \n    195 \"\"\"\n    196 dataset_kwargs = _preprocess_options_key_value(kwargs) if kwargs else {}\n--&gt; 198 return ogr_read(\n    199     get_vsi_path_or_buffer(path_or_buffer),\n    200     layer=layer,\n    201     encoding=encoding,\n    202     columns=columns,\n    203     read_geometry=read_geometry,\n    204     force_2d=force_2d,\n    205     skip_features=skip_features,\n    206     max_features=max_features or 0,\n    207     where=where,\n    208     bbox=bbox,\n    209     mask=_mask_to_wkb(mask),\n    210     fids=fids,\n    211     sql=sql,\n    212     sql_dialect=sql_dialect,\n    213     return_fids=return_fids,\n    214     dataset_kwargs=dataset_kwargs,\n    215     datetime_as_string=datetime_as_string,\n    216 )\n\nFile pyogrio/_io.pyx:1313, in pyogrio._io.ogr_read()\n\nFile pyogrio/_io.pyx:232, in pyogrio._io.ogr_open()\n\nDataSourceError: original_inputs/boundaries/Output_Areas_2021_EW_BFC_V8_-393965239550753877.gpkg: No such file or directory\n\n\n\n\nuprn\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[4], line 1\n----&gt; 1 uprn\n\nNameError: name 'uprn' is not defined\n\n\n\n\nimport geopandas as gpd\nfrom keplergl import KeplerGl\n\n# --- Load your data ---\n# uprn_gdf = gpd.read_file(\"uprn_points.geojson\")  # or CSV with lat/lon\n# oa_gdf = gpd.read_file(\"output_areas.geojson\")\n\n\n\n# --- Create Kepler map ---\nmap_ = KeplerGl(height=700)\n\n# Add layers\nmap_.add_data(data=uprn, name=\"UPRN Points\")\nmap_.add_data(data=oab, name=\"Output Areas\")\n\n# Display interactive map in notebook\n\nmap_.config = {'version': 'v1',\n 'config': {'visState': {'filters': [],\n   'layers': [{'id': 'v7ig0uf',\n     'type': 'point',\n     'config': {'dataId': 'UPRN Points',\n      'label': 'point',\n      'color': [218, 112, 191],\n      'highlightColor': [252, 242, 26, 255],\n      'columns': {'lat': 'LATITUDE', 'lng': 'LONGITUDE'},\n      'isVisible': True,\n      'visConfig': {'radius': 1.6,\n       'fixedRadius': False,\n       'opacity': 1,\n       'outline': False,\n       'thickness': 2,\n       'strokeColor': None,\n       'colorRange': {'name': 'Uber Viz Qualitative 4',\n        'type': 'qualitative',\n        'category': 'Uber',\n        'colors': ['#B3AD9E',\n         '#89DAC1',\n         '#1E96BE',\n         '#E79FD5',\n         '#829AE3',\n         '#F89570',\n         '#FFCB99',\n         '#B7885E',\n         '#F6D18A',\n         '#17B8BE',\n         '#776E57',\n         '#4DC19C',\n         '#125C77',\n         '#DA70BF',\n         '#223F9A',\n         '#F15C17',\n         '#FF991F',\n         '#88572C',\n         '#DDB27C',\n         '#12939A'],\n        'reversed': True},\n       'strokeColorRange': {'name': 'Global Warming',\n        'type': 'sequential',\n        'category': 'Uber',\n        'colors': ['#5A1846',\n         '#900C3F',\n         '#C70039',\n         '#E3611C',\n         '#F1920E',\n         '#FFC300']},\n       'radiusRange': [0, 50],\n       'filled': True},\n      'hidden': False,\n      'textLabel': []},\n     'visualChannels': {'colorField': {'name': 'PCDS', 'type': 'string'},\n      'colorScale': 'ordinal',\n      'strokeColorField': None,\n      'strokeColorScale': 'quantile',\n      'sizeField': None,\n      'sizeScale': 'linear'}},\n    {'id': 'bh82qf',\n     'type': 'geojson',\n     'config': {'dataId': 'UPRN Points',\n      'label': 'UPRN Points',\n      'color': [18, 92, 119],\n      'highlightColor': [252, 242, 26, 255],\n      'columns': {'geojson': 'geometry'},\n      'isVisible': False,\n      'visConfig': {'opacity': 0.8,\n       'strokeOpacity': 0.8,\n       'thickness': 0.5,\n       'strokeColor': None,\n       'colorRange': {'name': 'Global Warming',\n        'type': 'sequential',\n        'category': 'Uber',\n        'colors': ['#5A1846',\n         '#900C3F',\n         '#C70039',\n         '#E3611C',\n         '#F1920E',\n         '#FFC300']},\n       'strokeColorRange': {'name': 'Global Warming',\n        'type': 'sequential',\n        'category': 'Uber',\n        'colors': ['#5A1846',\n         '#900C3F',\n         '#C70039',\n         '#E3611C',\n         '#F1920E',\n         '#FFC300']},\n       'radius': 10,\n       'sizeRange': [0, 10],\n       'radiusRange': [0, 50],\n       'heightRange': [0, 500],\n       'elevationScale': 5,\n       'enableElevationZoomFactor': True,\n       'stroked': False,\n       'filled': True,\n       'enable3d': False,\n       'wireframe': False},\n      'hidden': False,\n      'textLabel': [{'field': None,\n        'color': [255, 255, 255],\n        'size': 18,\n        'offset': [0, 0],\n        'anchor': 'start',\n        'alignment': 'center',\n        'outlineWidth': 0,\n        'outlineColor': [255, 0, 0, 255],\n        'background': False,\n        'backgroundColor': [0, 0, 200, 255]}]},\n     'visualChannels': {'colorField': None,\n      'colorScale': 'quantile',\n      'strokeColorField': None,\n      'strokeColorScale': 'quantile',\n      'sizeField': None,\n      'sizeScale': 'linear',\n      'heightField': None,\n      'heightScale': 'linear',\n      'radiusField': None,\n      'radiusScale': 'linear'}},\n    {'id': 'gkqf4cg',\n     'type': 'geojson',\n     'config': {'dataId': 'Output Areas',\n      'label': 'Output Areas',\n      'color': [77, 193, 156],\n      'highlightColor': [252, 242, 26, 255],\n      'columns': {'geojson': 'geometry'},\n      'isVisible': True,\n      'visConfig': {'opacity': 0.8,\n       'strokeOpacity': 0.8,\n       'thickness': 0.5,\n       'strokeColor': [119, 110, 87],\n       'colorRange': {'name': 'Global Warming',\n        'type': 'sequential',\n        'category': 'Uber',\n        'colors': ['#5A1846',\n         '#900C3F',\n         '#C70039',\n         '#E3611C',\n         '#F1920E',\n         '#FFC300']},\n       'strokeColorRange': {'name': 'Global Warming',\n        'type': 'sequential',\n        'category': 'Uber',\n        'colors': ['#5A1846',\n         '#900C3F',\n         '#C70039',\n         '#E3611C',\n         '#F1920E',\n         '#FFC300']},\n       'radius': 10,\n       'sizeRange': [0, 10],\n       'radiusRange': [0, 50],\n       'heightRange': [0, 500],\n       'elevationScale': 5,\n       'enableElevationZoomFactor': True,\n       'stroked': True,\n       'filled': False,\n       'enable3d': False,\n       'wireframe': False},\n      'hidden': False,\n      'textLabel': [{'field': None,\n        'color': [255, 255, 255],\n        'size': 18,\n        'offset': [0, 0],\n        'anchor': 'start',\n        'alignment': 'center',\n        'outlineWidth': 0,\n        'outlineColor': [255, 0, 0, 255],\n        'background': False,\n        'backgroundColor': [0, 0, 200, 255]}]},\n     'visualChannels': {'colorField': None,\n      'colorScale': 'quantile',\n      'strokeColorField': None,\n      'strokeColorScale': 'quantile',\n      'sizeField': None,\n      'sizeScale': 'linear',\n      'heightField': None,\n      'heightScale': 'linear',\n      'radiusField': None,\n      'radiusScale': 'linear'}}],\n   'effects': [],\n   'interactionConfig': {'tooltip': {'fieldsToShow': {'UPRN Points': [{'name': 'FID',\n        'format': None},\n       {'name': 'UPRN', 'format': None},\n       {'name': 'PCDS', 'format': None}],\n      'Output Areas': [{'name': 'OA', 'format': None}]},\n     'compareMode': False,\n     'compareType': 'absolute',\n     'enabled': True},\n    'brush': {'size': 0.5, 'enabled': False},\n    'geocoder': {'enabled': False},\n    'coordinate': {'enabled': False}},\n   'layerBlending': 'normal',\n   'overlayBlending': 'normal',\n   'splitMaps': [],\n   'animationConfig': {'currentTime': None, 'speed': 1},\n   'editor': {'features': [], 'visible': True}},\n  'mapState': {'bearing': 0,\n   'dragRotate': False,\n   'latitude': 53.411070682445505,\n   'longitude': -2.9555248416628115,\n   'pitch': 0,\n   'zoom': 15.644176750750857,\n   'isSplit': False,\n   'isViewportSynced': True,\n   'isZoomLocked': False,\n   'splitMapViewports': []},\n  'mapStyle': {'styleType': 'dark-matter',\n   'topLayerGroups': {'road': False, 'building': False},\n   'visibleLayerGroups': {'label': True,\n    'road': True,\n    'border': False,\n    'building': True,\n    'water': True,\n    'land': True,\n    '3d building': False},\n   'threeDBuildingColor': [15.035172933000911,\n    15.035172933000911,\n    15.035172933000911],\n   'backgroundColor': [0, 0, 0],\n   'mapStyles': {}}}}\nmap_\n\n\n\nUser Guide: https://docs.kepler.gl/docs/keplergl-jupyter\n\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[5], line 14\n     11 map_ = KeplerGl(height=700)\n     13 # Add layers\n---&gt; 14 map_.add_data(data=uprn, name=\"UPRN Points\")\n     15 map_.add_data(data=oab, name=\"Output Areas\")\n     17 # Display interactive map in notebook\n\nNameError: name 'uprn' is not defined\n\n\n\n\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport matplotlib.image as mpimg\n\n# Load your image\nimg = mpimg.imread(\"your_image.jpg\")  # supports .png, .jpg, etc.\n\n# Create a Matplotlib figure\nfig, ax = plt.subplots(figsize=(8, 6))\nax.imshow(img)\nax.axis(\"off\")  # hide axes\n\n# Example legend entries (label + color)\nlegend_items = [\n    (\"Category A\", \"red\"),\n    (\"Category B\", \"blue\"),\n    (\"Category C\", \"green\"),\n]\n\n# Create patches for legend\npatches = [mpatches.Patch(color=color, label=label) for label, color in legend_items]\n\n# Add legend to the image\nlegend = ax.legend(\n    handles=patches,\n    loc=\"lower right\",       # try \"upper left\", \"center\", etc.\n    fontsize=10,\n    framealpha=0.8,          # transparency of legend box\n    facecolor=\"white\",       # legend background\n    edgecolor=\"black\"\n)\n\n# Optional: Adjust layout and show/save\nplt.tight_layout()\nplt.show()\n# plt.savefig(\"image_with_legend.png\", dpi=300, bbox_inches=\"tight\")\n\n\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[6], line 6\n      3 import matplotlib.image as mpimg\n      5 # Load your image\n----&gt; 6 img = mpimg.imread(\"your_image.jpg\")  # supports .png, .jpg, etc.\n      8 # Create a Matplotlib figure\n      9 fig, ax = plt.subplots(figsize=(8, 6))\n\nFile ~/projects/GeoDem_CartoWorkshop2025/.venv/lib/python3.12/site-packages/matplotlib/image.py:1520, in imread(fname, format)\n   1513 if isinstance(fname, str) and len(parse.urlparse(fname).scheme) &gt; 1:\n   1514     # Pillow doesn't handle URLs directly.\n   1515     raise ValueError(\n   1516         \"Please open the URL for reading and pass the \"\n   1517         \"result to Pillow, e.g. with \"\n   1518         \"``np.array(PIL.Image.open(urllib.request.urlopen(url)))``.\"\n   1519         )\n-&gt; 1520 with img_open(fname) as image:\n   1521     return (_pil_png_to_float_array(image)\n   1522             if isinstance(image, PIL.PngImagePlugin.PngImageFile) else\n   1523             pil_to_array(image))\n\nFile ~/projects/GeoDem_CartoWorkshop2025/.venv/lib/python3.12/site-packages/PIL/Image.py:3513, in open(fp, mode, formats)\n   3511 if is_path(fp):\n   3512     filename = os.fspath(fp)\n-&gt; 3513     fp = builtins.open(filename, \"rb\")\n   3514     exclusive_fp = True\n   3515 else:\n\nFileNotFoundError: [Errno 2] No such file or directory: 'your_image.jpg'\n\n\n\n\nmap_.config\n\n{}\n\n\n\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport contextily as cx\n\n# --- Ensure both layers use Web Mercator ---\nuprn = uprn.to_crs(epsg=3857)\noab = oab.to_crs(epsg=3857)\n\n# --- Create figure ---\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Plot OA boundaries (thin grey outline, no fill)\noab.plot(ax=ax, facecolor=\"none\", edgecolor=\"lightgrey\", linewidth=0.5)\n\n# Plot UPRN points coloured by postcode (no legend, smaller dots)\nuprn.plot(\n    ax=ax,\n    column=\"PCDS\",\n    cmap=\"tab20\",\n    markersize=4,   # smaller points\n    alpha=0.8,\n    legend=False,   # hide postcode legend\n)\n\n# Add CartoDB DarkMatter basemap (dark & clean)\ncx.add_basemap(ax, source=cx.providers.CartoDB.DarkMatter)\n\n# --- Clean aesthetics ---\nax.set_axis_off()\nax.set_title(\n    \"UPRN Points by Postcode within Output Areas\",\n    fontsize=15,\n    weight=\"bold\",\n    pad=15\n)\n\nplt.tight_layout()\nplt.show()\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[8], line 6\n      3 import contextily as cx\n      5 # --- Ensure both layers use Web Mercator ---\n----&gt; 6 uprn = uprn.to_crs(epsg=3857)\n      7 oab = oab.to_crs(epsg=3857)\n      9 # --- Create figure ---\n\nNameError: name 'uprn' is not defined"
  },
  {
    "objectID": "creatinggeodem.html",
    "href": "creatinggeodem.html",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "",
    "text": "This notebook contains the full workflow for producing a geodemographic classification from scratch in python using k-means clustering.\n\nData Access and Processing:\n\nAccess UK Census data and process using Pandas.\nSelect a specific region of interest (e.g., Liverpool City Region, Greater Manchester, Greater London).\n\nCensus Data Analysis and Variable selection:\n\nSelect relevant Census variables for clustering.\nStandardise variables.\nPerform correlation & variance analysis to identify potentially redundant variables.\nAlternative variable selection methods (e.g., PCA, Autoencoders).\n\nClustering:\n\nDetermine optimal number of clusters using Clustergrams.\nApply K-Means clustering to classify areas based on selected variables.\nPerform top-down hierarchical clustering to divide clusters into subgroups.\n\nAnalytical Techniques:\n\nUse UMAP (Uniform Manifold Approximation and Projection) to visualise high-dimensional embeddings in 2D.\n\nVisualisation and Communication:\n\nVisualise clusters and subclusters using Kepler.gl for interactive mapping.\nExplore cluster characteristics using summary statistics and index scores.\nExport results to various formats (GeoPackage, Parquet) for use in GIS software.\n\nCluster Naming with LLMs:\n\nUse Large Language Models (LLMs) to generate descriptive names and summaries for clusters based on their characteristics.\n\n\nThe code used to generate this notebook is available on GitHub. Instructions for setting up the environment and downloading the data are provided in the README file."
  },
  {
    "objectID": "creatinggeodem.html#install-required-packages-in-colab",
    "href": "creatinggeodem.html#install-required-packages-in-colab",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Install Required Packages in Colab",
    "text": "Install Required Packages in Colab\nIf you are using Google Colab, you will need to install the required packages in the Colab environment. You can do this by uncommenting and running the following code cell in the notebook:\n\n# !pip install pandas geopandas pyarrow scikit-learn clustergram umap-learn seaborn plotly matplotlib numpy keplergl openai\n\nImport the necessary libraries and packages.\n\nimport pandas as pd\nimport numpy as np\nimport geopandas as gpd\nfrom sklearn.cluster import KMeans\nfrom clustergram import Clustergram\nimport matplotlib.pyplot as plt\nimport os\n\nfrom keplergl import KeplerGl\nimport umap.umap_ as umap\nimport plotly.express as px\nfrom matplotlib import colors as mcolors\nimport seaborn as sns\nimport openai\nimport json\n\n#set a  random seed for reproducibility\nrandom_seed = 507\n\n#check that outputs directories exists (if not create it), this is important if you are running the notebook in colab\n\nif not os.path.exists('outputs'):\n    os.makedirs('outputs')\nif not os.path.exists('outputs/maps'):\n    os.makedirs('outputs/maps')\nif not os.path.exists('outputs/plots'):\n    os.makedirs('outputs/plots')\nif not os.path.exists('outputs/subclusters'):\n    os.makedirs('outputs/subclusters')"
  },
  {
    "objectID": "creatinggeodem.html#examine-the-data",
    "href": "creatinggeodem.html#examine-the-data",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Examine the Data",
    "text": "Examine the Data\nWe can plot the distribution of all the variables to get a sense of their distributions. Many of the variables are highly skewed, which is common for Census data. Skewed variables can be problematic for Geodemographics because they cause distance metrics to be dominated by extreme values so effect the quality of clustering.\n\n# Use pandas histogram plotting function with seaborn aesthetics\nsns.set_style(\"whitegrid\")\nnrows = int(np.ceil(len(variable_df.columns) / 3))\n\nvariable_df_withnames = variable_df.copy()\nvariable_df_withnames.columns = var_lookup['Variable_Name'].values[:58]\nvariable_df_withnames.hist(bins=30, figsize=(7.5, nrows*1.5), edgecolor='black', layout=(nrows, 3))\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "creatinggeodem.html#spatial-data",
    "href": "creatinggeodem.html#spatial-data",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Spatial Data",
    "text": "Spatial Data\nWe will also need the Output Area boundaries to map the results. The file used here is a GeoPackage containing the 2021 Output Area boundaries for the whole of the UK, clipped to the extent of England and Wales, Scotland, and Northern Ireland. The file has been created by joining the original files for each nation downloaded from the ONS Geoportal.\n\n#---------\n# Import spatial data\n#---------\nOA_Boundaries = gpd.read_file(\"input_data/OA_2021_22_Boundaries.gpkg\").set_index('OA')\n#---------\n# Load Local Authority District (LAD) for region selection\n#---------\nLAD_Boundaries = gpd.read_file(\"input_data/Local_Authority_Districts_December_2022_UK_BGC_V2_5759908710055972638.gpkg\")\n\n\nSelecting a Region\nFor this workshop, we will focus on a specific region of the UK to keep the analysis manageable.\nFocusing on a specific region allows us to create a more detailed and relevant geodemographic classification for that area, capturing local nuances and characteristics that may be lost in a broader national classification. For example, a London specific OAC was developed as London has a drastically different demographic composition to the rest of the United Kingdom (Alex D. Singleton and Longley 2024).\n\nSingleton, Alex D., and Paul A. Longley. 2024. “Classifying and Mapping Residential Structure Through the London Output Area Classification.” EPB: Urban Analytics and City Science 51 (5): 1153–64. https://doi.org/10.1177/23998083241242913.\nBy default we will use the Output Areas within the Liverpool City Region covering the city of liverpool and its surrounding areas. This region is prodominently urban and has a diverse population, making it an interesting case study for geodemographic classification. If running this notebook on your own machine, you can change the region of study from the selection below.\n\n# region definitions (LAD22CD codes)\nregion_lads = {\n    \"Greater Manchester\": [\n        \"E08000001\",\"E08000002\",\"E08000003\",\"E08000004\",\"E08000005\",\n        \"E08000006\",\"E08000007\",\"E08000008\",\"E08000009\",\"E08000010\"\n    ],\n    \"Liverpool City Region\": [\n        \"E06000006\",\"E08000011\",\"E08000012\",\"E08000013\",\"E08000014\",\"E08000015\"\n    ],\n    \"Greater London\": [\n        \"E09000001\",\"E09000002\",\"E09000003\",\"E09000004\",\"E09000005\",\n        \"E09000006\",\"E09000007\",\"E09000008\",\"E09000009\",\"E09000010\",\n        \"E09000011\",\"E09000012\",\"E09000013\",\"E09000014\",\"E09000015\",\n        \"E09000016\",\"E09000017\",\"E09000018\",\"E09000019\",\"E09000020\",\n        \"E09000021\",\"E09000022\",\"E09000023\",\"E09000024\",\"E09000025\",\n        \"E09000026\",\"E09000027\",\"E09000028\",\"E09000029\",\"E09000030\",\n        \"E09000031\",\"E09000032\",\"E09000033\"\n    ],\n    \"Scotland\": [\n        \"S12000005\",\"S12000006\",\"S12000008\",\"S12000010\",\"S12000011\",\n        \"S12000013\",\"S12000014\",\"S12000017\",\"S12000018\",\"S12000019\",\n        \"S12000020\",\"S12000021\",\"S12000023\",\"S12000026\",\"S12000027\",\n        \"S12000028\",\"S12000029\",\"S12000030\",\"S12000033\",\"S12000034\",\n        \"S12000035\",\"S12000036\",\"S12000038\",\"S12000039\",\"S12000040\",\n        \"S12000041\",\"S12000042\",\"S12000045\",\"S12000047\",\"S12000048\",\n        \"S12000049\",\"S12000050\"\n    ],\n    \"Northern Ireland\": [\n        \"N09000001\",\"N09000002\",\"N09000003\",\"N09000004\",\"N09000005\",\n        \"N09000006\",\"N09000007\",\"N09000008\",\"N09000009\",\"N09000010\",\n        \"N09000011\"\n    ],\n    \"Wales\": [\n        \"W06000001\",\"W06000002\",\"W06000003\",\"W06000004\",\"W06000005\",\n        \"W06000006\",\"W06000007\",\"W06000008\",\"W06000009\",\"W06000010\",\n        \"W06000011\",\"W06000012\",\"W06000013\",\"W06000014\",\"W06000015\",\n        \"W06000016\",\"W06000017\",\"W06000018\",\"W06000019\",\"W06000020\",\n        \"W06000021\",\"W06000022\",\"W06000023\",\"W06000024\"\n    ],\n}\n\nSelecting the region of interest:\n\n#Choose region from the list above by uncommenting the relevant line\nlad_codes = region_lads[\"Liverpool City Region\"]\n# #or eg:\n# lad_codes = region_lads[\"Scotland\"]\n\n# Spatial join to filter only intersecting OAs\noas_region = gpd.sjoin(OA_Boundaries, LAD_Boundaries[LAD_Boundaries[\"LAD22CD\"].isin(lad_codes)], predicate=\"intersects\")\n\n# --- Merge OA polygons with your variable data keeping only those with matching OAs in the region\noas_region_vars = oas_region.join(variable_df, how=\"inner\")\n\n# #keep only OAs in our region\nvariable_df_region=variable_df.loc[variable_df.index.isin(oas_region.index)]\n\n\n\nMap the Area\nWe will use Kepler.gl to visualise the Output Areas in our selected region. Kepler.gl is an open-source geospatial analysis tool that allows for interactive mapping and visualisation of large datasets.\n\n#code to enable kepler in colab\nfrom IPython.display import Javascript\ndisplay(Javascript('''\n  google.colab.widgets.installCustomManager('https://ssl.gstatic.com/colaboratory-static/widgets/colab-cdn-widget-manager/6a14374f468a145a/manager.min.js');\n'''))\n\nfrom shapely.ops import unary_union\n\nregion_geom = unary_union(\n    LAD_Boundaries.loc[LAD_Boundaries[\"LAD22CD\"].isin(lad_codes), \"geometry\"]\n)\nregion_centroid = region_geom.centroid\ncentroid_ll = gpd.GeoSeries([region_centroid], crs=LAD_Boundaries.crs).to_crs(epsg=4326).iloc[0]\ncentroid_lat, centroid_lon = centroid_ll.y, centroid_ll.x\n\n# --- Quick Kepler map ---\narea_map_ = KeplerGl(\n    height=600,\n    config={\n        \"version\": \"v1\",\n        \"config\": {\n            \"mapState\": {\n               'latitude': centroid_lat,\n                'longitude': centroid_lon,\n                \"zoom\": 9,\n                \"pitch\": 0,\n                \"bearing\": 0\n            }\n        }\n    }\n)\n# Add your layer\narea_map_.add_data(data=oas_region_vars)\n# If you want to export to a standalone HTML:\narea_map_.save_to_html(file_name=\"outputs/maps/region_oas_map.html\")\n# Show inside Jupyter\ndisplay(area_map_)"
  },
  {
    "objectID": "creatinggeodem.html#correlation-variance-analysis",
    "href": "creatinggeodem.html#correlation-variance-analysis",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Correlation & Variance Analysis",
    "text": "Correlation & Variance Analysis\n\ntransformed_variable_df_withnames = transformed_variable_df.copy()\ntransformed_variable_df_withnames.columns = [var_lookup.set_index(\"No.\")[\"Variable_Name\"].to_dict().get(col, col) for col in transformed_variable_df.columns]\n\n# --- Correlation Check ---\ncorr_matrix = transformed_variable_df_withnames.corr()\n# --- Interactive heatmap with Plotly ---\nfig = px.imshow(\n    corr_matrix.values,\n    color_continuous_scale=\"RdBu_r\",\n    zmin=-1, zmax=1,\n    title=\"Correlation Heatmap\",\n    x=corr_matrix.columns,\n    y=corr_matrix.columns,\n)\n# Add hover names for tooltips\nfig.update_traces(\n    hovertemplate=\"&lt;b&gt;%{x}&lt;/b&gt; vs &lt;b&gt;%{y}&lt;/b&gt;&lt;br&gt;Correlation: %{z:.3f}&lt;extra&gt;&lt;/extra&gt;\",\n)\n# Hide x/y tick labels but keep tooltips\nfig.update_xaxes(showticklabels=False)\nfig.update_yaxes(showticklabels=False)\nfig.show()\n\n# --- Find highly correlated pairs (print each pair twice) ---\ncols = corr_matrix.columns\n# consider only upper triangle to get unique unordered pairs (i &lt; j)\nupper_mask = np.triu(np.ones(corr_matrix.shape, dtype=bool), k=1)\n# build mask for correlations above 0.95 (and exclude perfect 1.0)\ncorr_threshold = 0.95\ncorr_vals = corr_matrix.values\n# consider only upper triangle unique pairs (i &lt; j) and print each once once\nmask = ((corr_vals &gt; corr_threshold) & upper_mask)\n\npairs = np.column_stack(np.where(mask))\nfor i, j in pairs:\n    col_i, col_j = cols[i], cols[j]\n    val = corr_matrix.iat[i, j]\n    print(f\"High correlation between {col_i} and {col_j}: {val:.3f}\")\n\n# --- Variance Check ---\nvariances = transformed_variable_df_withnames.var()\n#plot the variances\nplt.figure(figsize=(8, 5))\nvariances.sort_values().plot(kind='bar')\nplt.ylabel('Variance')\nplt.title('Variance of Each Variable')\nplt.show()"
  },
  {
    "objectID": "creatinggeodem.html#removing-variables",
    "href": "creatinggeodem.html#removing-variables",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Removing Variables",
    "text": "Removing Variables\nIf we want to remove any variables we can do so here. This could be based on the analysis above or to tailor the classification to a specific purpose.\n\n# drop_vars = ['v02', 'v04']  # Replace with actual variable names to drop\ndrop_vars = [] # Example: No variables to drop\n# for northern ireland #bangladeshi ethnicity now removed as no variation as no bangladeshi in northern ireland\n# drop_vars = ['v12'] \n\ncleaned_variable_df = transformed_variable_df.drop(columns=drop_vars)"
  },
  {
    "objectID": "creatinggeodem.html#choosing-the-number-of-clusters-k---clustergrams",
    "href": "creatinggeodem.html#choosing-the-number-of-clusters-k---clustergrams",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Choosing the Number of Clusters (k) - Clustergrams",
    "text": "Choosing the Number of Clusters (k) - Clustergrams\nWhen using k-means clustering, one of the key decisions is selecting the optimal number of clusters (k). This choice can significantly impact the quality and interpretability of the resulting geodemographic classification. Key considerations when choosing k:\n\nEach cluster be as homogeneous as possible.\nEach cluster should be as distinct from the others as possible.\nThe clusters should be as evenly sized as possible.\n\nClustergrams (Fleischmann 2023) are visualisation technique that shows how cluster assignments change as you increase the number of clusters (k). This helps you to understand the structure in very high-dimensional space in the following ways:\n\nFleischmann, Martin. 2023. “Clustergram: Visualization and Diagnostics for Cluster Analysis.” Journal of Open Source Software 8 (89): 5240. https://doi.org/10.21105/joss.05240.\n\nCluster separation: Helps you to determine the right number of clusters by visualising how cleanly clusters separate\n\nCluster stability: Shows which clusters persist across different k values (stable long lines) vs. those which are artifacts of over-clustering (short, erratic lines)\n\nSplit patterns: Reveals the natural hierarchy in the data by showing how clusters subdivide\n\nFurther guidance on interpreting clustergrams and choosing the number of clusters can be found here: Clustergram\n\n# Since k-means is sensitive to initialization, `n_init` determines the number of \n# times the algorithm runs with different centroid seeds. The final result is the \n# best outcome based on inertia/WCSS (within-cluster sum of squares).\nn_init = 100  # Use a low value for quick testing, increase (~100) for final results\ncgram = Clustergram(range(1, 10), n_init=n_init, random_state=random_seed,verbose=False)  # Initialize clustergram model\ncgram.fit(cleaned_variable_df)  # Fit model to data\ncgram.plot()  # Generate plot\nplt.savefig(\"outputs/plots/supergroup_clustergram.png\")  # Save figure\nplt.show()  # Display plot\n\n\n\n\n\n\n\n\nChoose the number of clusters (k) based on the clustergram above.\n\n# Define the number of clusters (K). Choose K based on the clustergram plot.\nnum_clusters = 5"
  },
  {
    "objectID": "creatinggeodem.html#apply-k-means-clustering",
    "href": "creatinggeodem.html#apply-k-means-clustering",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Apply K-Means Clustering",
    "text": "Apply K-Means Clustering\n\n# num_clusters (int): The number of clusters (K) to create.\n# n_init (int): Number of times the K-means algorithm runs with different initial \n#                 centroid seeds. The best result based on inertia/WCSS is chosen. \n#                 A higher value (e.g., ~1000) is recommended for final results, \n#                 but a lower value can be used for testing.\n\n\nn_init = 1000 # Use a low value for quick testing, increase (~100) for final results\noutput_filepath = \"outputs/supergroups_clusteroutput.csv\"\n# Initialize the K-means model\nkmeans_model = KMeans(n_clusters=num_clusters,init=\"random\", random_state=random_seed, n_init=n_init)\n# Fit the model and assign clusters to a new dataframe which is a copy of the input data\nsupergrouped_variable_df = cleaned_variable_df.copy()\nsupergrouped_variable_df['cluster'] = kmeans_model.fit_predict(cleaned_variable_df)\n# Ensure output directory exists\nos.makedirs(os.path.dirname(output_filepath), exist_ok=True)\n# Save the cluster assignments to a CSV file\nsupergrouped_variable_df[['cluster']].to_csv(output_filepath)\n# Map numeric labels to letters\nlabel_map = {i: chr(65 + i) for i in range(num_clusters)}  # 0-&gt;A, 1-&gt;B, etc.\nsupergrouped_variable_df['cluster'] = supergrouped_variable_df['cluster'].map(label_map)\n#verify the output\nsupergrouped_variable_df[\"cluster\"].head()\n\nOA\nE00031533    E\nE00031534    E\nE00031558    E\nE00031561    A\nE00031563    E\nName: cluster, dtype: object"
  },
  {
    "objectID": "creatinggeodem.html#mapping-the-clusters",
    "href": "creatinggeodem.html#mapping-the-clusters",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Mapping the Clusters",
    "text": "Mapping the Clusters\nWe can visualise the clusters on a map to see their spatial distribution. This can help us"
  },
  {
    "objectID": "creatinggeodem.html#umap-visualisation",
    "href": "creatinggeodem.html#umap-visualisation",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "UMAP Visualisation",
    "text": "UMAP Visualisation\nWe can use UMAP (Uniform Manifold Approximation and Projection) (McInnes, Healy, and Melville 2020) to visualise the high-dimensional Census data in 2D. UMAP is a dimensionality reduction technique that preserves both local and global structure in the data, making it well-suited for visualising complex datasets like Census data.\n\nMcInnes, Leland, John Healy, and James Melville. 2020. “UMAP: Uniform Manifold Approximation and Projection for Dimension Reduction.” https://arxiv.org/abs/1802.03426.\n\n# Features = all columns except the cluster label\nfeatures = [c for c in supergrouped_variable_df.columns if c != 'cluster']\n# Extract features and labels  (transformed)\nX = supergrouped_variable_df[features].values\nlabels = supergrouped_variable_df['cluster'].values\n\n# Fit UMAP\n# Apply UMAP to reduce 64 dimensions to 2D\nreducer = umap.UMAP(\n    n_neighbors=30,        # Numbers of neighbours\n    min_dist=0.0,          # Allow points to be closer together\n    n_components=2,        # Reduce to 2D for visualsation\n    random_state=508,       # For reproducible results\n    metric='cosine',       # Cosine similarity \n    init='random',         # Use random initialisation\n    n_epochs=500,          # More epochs for better convergence\n    spread=1.0,            # Controls how tightly points are packed\n    verbose=False          # Show progress\n)\n\nembedding = reducer.fit_transform(X)\n\numap_results = pd.DataFrame({\n    'UMAP1': embedding[:, 0],\n    'UMAP2': embedding[:, 1],\n    'Cluster': labels\n})\n\n# Save the UMAP results\numap_results.to_parquet('outputs/umap_results.parquet', index=False)\n\n/home/ogoodwin/projects/GeoDem_CartoWorkshop2025/.venv/lib/python3.12/site-packages/umap/umap_.py:1952: UserWarning:\n\nn_jobs value 1 overridden to 1 by setting random_state. Use no seed for parallelism.\n\n\n\n\n# Define colours for each cluster - same as earlier map\ncolours = {\n    \"A\": '#8dd3c7',\n    \"B\": '#ffffb3',\n    \"C\": '#bebada',\n    \"D\": '#fb8072',\n    \"E\": '#fdb462',\n    \"F\": \"#235477\",\n    \"G\": '#fccde5',\n    \"H\": '#d9d9d9',\n    \"I\": '#bc80bd',\n    \"J\": '#ccebc5'\n}\n\n# Create interactive UMAP scatter plot\nfig_interactive = px.scatter(\n    umap_results,\n    x='UMAP1',\n    y='UMAP2',\n    color='Cluster',\n    category_orders={\"Cluster\": sorted(umap_results[\"Cluster\"].unique())},  #\n    color_discrete_map=colours,  \n)\n\n# Style tweaks\nfig_interactive.update_traces(marker=dict(size=3, opacity=0.7))\nfig_interactive.update_layout(\n    title=\"UMAP Projection of Clusters\",\n    xaxis_title=\"UMAP 1\",\n    yaxis_title=\"UMAP 2\",\n    legend_title=\"Cluster\"\n)\n\n#save to html\nfig_interactive.write_html(\"outputs/umap_interactive.html\")\n# fig_interactive.update_layout(width=800, height=600)\nfig_interactive.show(config={\"responsive\": False})\n\n                            \n                                            \n\n\nThe UMAP projection shows there is reasonable separation between the clusters, indicating that the k-means clustering has identified distinct groups in the data. In particular the small cluster in the bottom left which represents the city centre in our case study of Liverpool, is well-defined and separated from other clusters.\nThere are indications of further structure within clusters, which could be explored further using hierarchical clustering to subdivide clusters into subclusters. More on that in a bit.. for now lets dig into the clusters that we’ve got."
  },
  {
    "objectID": "creatinggeodem.html#cluster-statistics",
    "href": "creatinggeodem.html#cluster-statistics",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Cluster Statistics",
    "text": "Cluster Statistics\n\n#Lot at the characteristics of each cluster\n\n# Read in the data\npop_size = pd.read_csv(\"input_data/oa_pop_data.csv\")\npop_size = pop_size.set_index('OA')\n#rename column to \"population\"\npop_size = pop_size.rename(columns={'uk001001': 'population'})\npop_size = pop_size['population']\n\n#basic statistics of each cluster, number (perc of OAs) in each cluster and population\n\n#number of OAs in each cluster\ncluster_counts = supergrouped_variable_df['cluster'].value_counts().sort_index()\n#percentage of OAs in each cluster\ncluster_perc = (cluster_counts / cluster_counts.sum() * 100).round(2)\n\n#join pop_size to supergrouped_variable_df on index\nsupergrouped_variable_df_withpop = supergrouped_variable_df.join(pop_size, how='left')\n\n#pop in each cluster\ncluster_pop = supergrouped_variable_df_withpop.groupby('cluster')['population'].sum()\n#percentage of pop in each cluster\ncluster_pop_perc = (cluster_pop / cluster_pop.sum() * 100).round(2)\n\n#combine into a dataframe\ncluster_summary = pd.DataFrame({\n    'Number of OAs': cluster_counts,\n    'Percentage of OAs': cluster_perc,\n    'Population': cluster_pop,\n    'Percentage of Population': cluster_pop_perc\n})\ncluster_summary\n\n\n\n\n\n\n\n\nNumber of OAs\nPercentage of OAs\nPopulation\nPercentage of Population\n\n\ncluster\n\n\n\n\n\n\n\n\nA\n804\n15.29\n226794\n14.40\n\n\nB\n737\n14.02\n225164\n14.30\n\n\nC\n1875\n35.66\n555477\n35.28\n\n\nD\n192\n3.65\n61126\n3.88\n\n\nE\n1650\n31.38\n505879\n32.13"
  },
  {
    "objectID": "creatinggeodem.html#cluster-profiling",
    "href": "creatinggeodem.html#cluster-profiling",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Cluster Profiling",
    "text": "Cluster Profiling\nIndex scores are a way to summarise how a particular variable behaves within a cluster compared to the overall average. They help identify which characteristics are over- or under-represented in each cluster.\nIndex scores are calculated as follows:\n\\[\n\\text{Index Score} = \\left( \\frac{\\text{Mean of Variable in Cluster}}{\\text{Overall Mean of Variable}} \\right) \\times 100\n\\]\nWhere:\n\nMean of Variable in Cluster: the average value of the variable for all areas within the specific cluster.\n\nOverall Mean of Variable: the average value of the variable across all areas in the dataset.\n\nHere we will look only at variables used in the clustering. It can also be useful to look at variables not used in the clustering or from other data sources to help understand the clusters.\n\n# map encoding -&gt; human name\nencoding_to_name = dict(zip(var_lookup[\"No.\"], var_lookup[\"Variable_Name\"]))\n\nfeatures = [c for c in supergrouped_variable_df.columns if c != 'cluster']\n#dont average the cluster column\ncluster_means = supergrouped_variable_df.groupby('cluster').mean()\nglobal_means = supergrouped_variable_df[features].mean()\nglobal_stds = supergrouped_variable_df[features].std()\n\n# --- Calculate percentage difference ---\npct_diff = (cluster_means / global_means) * 100\n#drop columns with nan\npct_diff = pct_diff.dropna(axis=1, how='any')\npct_display_df = pct_diff.T  # index: encodings\n\n\n# --- Calculate percentage difference ---\npct_diff = (cluster_means / global_means) * 100\n#drop columns with nan\npct_diff = pct_diff.dropna(axis=1, how='any')\npct_display_df = pct_diff.T  # index: encodings\n\n# build customdata for hover (human names repeated across clusters)\nhuman_names = pct_display_df.index.map(lambda e: encoding_to_name.get(e, e)).values\ncustomdata_pct = np.tile(human_names.reshape(-1, 1), (1, pct_display_df.shape[1]))\n\n# get symmetric range around 100\nmax_abs = np.nanmax(np.abs(pct_display_df.values - 100))\n\n# --- Heatmap (percentage difference) ---d\nfig_pct = px.imshow(\n    pct_display_df,\n    color_continuous_scale=\"RdYlGn\",\n    origin=\"lower\",\n    aspect=\"auto\",\n    labels=dict(x=\"Cluster\", y=\"Feature (encoding)\", color=\"% of global mean\"),\n    zmin=0,\n    zmax=200\n)\n\n# attach customdata and set hover\nfig_pct.data[0].customdata = customdata_pct\nfig_pct.update_traces(\n    hovertemplate=\"Cluster: %{x}&lt;br&gt;Encoding: %{y}&lt;br&gt;Name: %{customdata}&lt;br&gt;% of Global Mean: %{z:.1f}%&lt;extra&gt;&lt;/extra&gt;\",\n    zmid=100  # centre colours on 100%\n)\n\nfig_pct.update_layout(\n    title=\"Cluster Profiles (% of Global Mean)\",\n    xaxis_title=\"Cluster\",\n    yaxis_title=\"Feature (encoding)\",\n    height=800\n)\n\nfig_pct.show()"
  },
  {
    "objectID": "creatinggeodem.html#llm-cluster-naming-and-description",
    "href": "creatinggeodem.html#llm-cluster-naming-and-description",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "LLM Cluster Naming (and description)",
    "text": "LLM Cluster Naming (and description)\nTo create a useful geodemographic classification, we need to assign meaningful names and descriptions to each cluster. This helps in interpreting the clusters and communicating their characteristics effectively.\nTraditionally, this is done manually by examining the statistical profiles of each cluster (often with input (as we produced) sometimes with external ) and using domain knowledge to assign names. Either done by a single expert, panel or utilising crowd sourcing approaches. Either way it is a time consuming process. However, we can leverage Large Language Models (LLMs) to assist in this process. We have demonstrated that LLMs can be used to generate initial name and description suggestions based on the statistical profiles of each cluster (Alex D. Singleton and Spielman 2024).\nWe can use LLMs to generate initial name and description suggestions based on the statistical profiles of each cluster.\nAgain here we are using only the variables used in the clustering. It can also be useful to include other variables or external data to provide more context for the LLM.\n\nSingleton, Alex D., and Seth Spielman. 2024. “Segmentation Using Large Language Models: A New Typology of American Neighborhoods.” EPJ Data Science 13 (34). https://doi.org/10.1140/epjds/s13688-024-00466-1.\n\nUsing the OpenAI API\nBelow I use the OpenAI API, if you have an API key insert it in an .env file as3 OPENAI_API_KEY=“sk….sA”\n3 .env files are files that contain environment variables, they can be created as a plain text file (named .env) in the root directory. These files often contain private information so should not be commited to gitIf you do have an API key skip the next cell and go to the cell where we will use a browser prompt to get the cluster names and descriptions.\n\nfrom dotenv import load_dotenv\nload_dotenv()  # this loads variables from .env into environment\n\n#get your OpenAI API key from environment variable\nopenai_api_key = os.getenv(\"OPENAI_API_KEY\")\nif not openai_api_key:\n    raise ValueError(\"Please set the OPENAI_API_KEY environment variable.\")\n\nclient = openai.OpenAI(api_key=openai_api_key)\n\n# -------------------------\n# JSON Schema for output\n# -------------------------\ncluster_schema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"name\": {\"type\": \"string\"},\n        \"description\": {\"type\": \"string\"},\n    },\n    \"required\": [\"name\", \"description\"],\n    \"additionalProperties\": False,\n}\n\n\nsystem_prompt = \"\"\"You are a geodemographic analyst. \nYour task is to produce commercial-style geodemographic cluster pen portraits \nand cluster names.\"\"\"\n\nuser_prompt = \"\"\"\nA geodemographics company is trying to explain the characteristics of several \nneighborhoods to a new customer. They present data comparing each \nneighborhood to the region average. A score of 100 means the neighborhood \nis equivalent to the regional average, 150 means one and a half times, 200 means twice, 50 means half, \nand 300 means three times the regional average. \n\nThe description of each neighborhood should focus on characteristics with scores above 120 or below 80. \nWrite in the third person, no more than 500 words. \nDo not mention the specific scores. Instead, describe patterns relative to the regional average (above/below). \n\nIn the style of a commercial geodemographic classification, create a cluster name that summarises the pen portrait. \nThe name should capture as many different characteristics as possible and be no more than 3 words.\n\"\"\"\n\n# -------------------------\n# Loop through clusters\n# -------------------------\ncluster_summaries = {}\nfor cluster in pct_diff.index:\n    cluster_pct = pct_diff.loc[cluster]\n\n    cluster_data = {\n        \"cluster\": cluster,\n        \"data\": {\n            encoding_to_name.get(feature, feature): round(value, 1)\n            for feature, value in cluster_pct.items()\n        },\n    }\n\n    response = client.responses.create(\n        model=\"gpt-5-mini\",\n        input=[\n            {\"role\": \"system\", \"content\": system_prompt.strip()},\n            {\"role\": \"user\", \"content\": user_prompt.strip()},\n            {\"role\": \"user\", \"content\": json.dumps(cluster_data)},\n        ],\n        text={\n            \"format\": {\n                \"type\": \"json_schema\",\n                \"name\": \"cluster_summary\",\n                \"schema\": cluster_schema,\n                \"strict\": True,\n            }\n        },\n    )\n\n    cluster_summary = json.loads(response.output_text)\n\n    # store under your cluster ID\n    cluster_summaries[cluster] = cluster_summary\n\ncluster_summaries\n\n\n\nPrompt for Browser Based LLM\nThe follow code cell generates a prompt for to be used in an LLM of your choice. Try it in your browser based LLM of choice (e.g. chatGPT, Claude, Gemini, etc)\nThe prompt should insure that the LLM produses the output in the correct format but this cannot beguaranteed.\n\n#print the prompt to copy and paste into a LLM to generate cluster descriptions\n\nprompt_intial = \"\"\"\nA geodemographics company is trying to explain the characteristics of several neighbourhoods to a new customer. \nThey present data comparing each neighbourhood to the region average. \nA score of 100 means the neighbourhood is equivalent to the national average, \na score of 150 means the neighbourhood is one and a half times the national average, \na score of 200 means the neighbourhood is twice the national average, \na score of 50 means the neighbourhood is half of the region average, \na score of 300 means the neighbourhood is three times the region average. \n\nEach neighbourhood has the following characteristics, described in #DATA# below. \nData are presented for each characteristic followed by a colon, and then a score. \nThe description of each neighbourhood should focus on characteristics that have scores which are greater than 120 or less than 80.\nWrite a separate description for each cluster (Cluster A, Cluster B, Cluster C, Cluster D, etc. \nEach description should be written in the third person, in no more than 500 words. Do not mention the specific scores from the #DATA#. \nInstead, use descriptive words to illustrate rates that are above or below the regional average.\nMake comparisons to the regional average, do not talk in absolute terms.\n\"\"\"\n\nprompt_data =\"\"\n# print the index scores for each cluster in this format:\n\nfor cluster in pct_diff.index:\n    prompt_data += f\"\\n#DATA# cluster_key: {cluster}\\n\"\n    cluster_pct = pct_diff.loc[cluster]\n    for feature, value in cluster_pct.items():\n        feature_name = encoding_to_name.get(feature, feature)\n        prompt_data += f\"{feature_name}: {value:.1f}\\n\"\n\nprompt_struc = \"\"\"\nIn the style of a commercial geodemographic classification; create a cluster name \nthat would summarise the created geodemographic pen portraits. The names should capture as many \ndifferent characteristics contained within the description as possible. \nThe cluster name should be no more than 3 words.\nReturn your response in JSON format with the structure: {\"cluster_key_1\": {\"name\": \"\", \"description\": \"\"},\"cluster_key_2\": {\"name\": \"\", \"description\": \"\"},...}\"\"\"\n\nfull_prompt = prompt_intial + prompt_data + prompt_struc\nprint(full_prompt)\n\n\nA geodemographics company is trying to explain the characteristics of several neighbourhoods to a new customer. \nThey present data comparing each neighbourhood to the region average. \nA score of 100 means the neighbourhood is equivalent to the national average, \na score of 150 means the neighbourhood is one and a half times the national average, \na score of 200 means the neighbourhood is twice the national average, \na score of 50 means the neighbourhood is half of the region average, \na score of 300 means the neighbourhood is three times the region average. \n\nEach neighbourhood has the following characteristics, described in #DATA# below. \nData are presented for each characteristic followed by a colon, and then a score. \nThe description of each neighbourhood should focus on characteristics that have scores which are greater than 120 or less than 80.\nWrite a separate description for each cluster (Cluster A, Cluster B, Cluster C, Cluster D, etc. \nEach description should be written in the third person, in no more than 500 words. Do not mention the specific scores from the #DATA#. \nInstead, use descriptive words to illustrate rates that are above or below the regional average.\nMake comparisons to the regional average, do not talk in absolute terms.\n\n#DATA# cluster_key: A\nUsual residents per square kilometre: 94.8\nAged 4 years and under: 87.1\nAged 5 - 14 years: 91.7\nAged 25 - 44 years: 96.2\nAged 45 - 64 years: 101.9\nAged 65 - 84 years: 110.4\nAged 85 years and over: 139.5\nCountry of birth: Europe: United Kingdom: 102.4\nCountry of birth: Europe: EU countries: 96.7\nCountry of birth: Europe: Non-EU countries: 98.1\nCountry of birth: Africa: 84.3\nEthnic group: Bangladeshi: 99.4\nEthnic group: Chinese: 104.1\nEthnic group: Indian: 111.3\nEthnic group: Pakistani: 83.1\nEthnic group: Other Asian: 89.4\nEthnic group: Black: 67.3\nEthnic group: Mixed or Multiple ethnic groups: 98.0\nEthnic group: White: 101.1\nCannot speak English well or at all: 65.9\nNo religion: 99.0\nChristian: 101.8\nOther religion: 103.2\nNever married and never registered a civil partnership: 92.0\nMarried or in a registered civil partnership: 102.5\nSeparated or divorced: 106.6\nOne-person household: 110.9\nFamilies with no children: 101.2\nFamilies with dependent children: 91.7\nAll household members have the same ethnic group: 92.3\nLives in a communal establishment: 204.1\nAddress 1 year ago is the same as the address of enumeration: 100.5\nDetached house or bungalow: 113.9\nSemi-detached house or bungalow: 96.8\nTerraced (including end-terrace) house or bungalow: 85.8\nFlat maisonette or apartment: 185.1\nOwnership or shared ownership: 103.6\nSocial rented: 92.7\nPrivate rented: 107.7\nSIR: 94.5\nProvides unpaid care: 100.0\n2 or more cars or vans in household: 102.9\nHighest level of qualification: Level 1- 2 or Apprenticeship: 97.2\nHighest level of qualification: Level 3 qualifications: 94.6\nHighest level of qualification: Level 4 qualifications or above: 111.2\nHours worked: Part-time: 95.7\nHours worked: Full-time: 101.9\nNS-SeC: L15 Full-time students: 87.5\nSOC: 1. Managers directors and senior officials: 112.0\nSOC: 2. Professional occupations: 109.4\nSOC: 3. Associate professional and technical occupations: 104.1\nSOC: 4. Administrative and secretarial occupations: 101.1\nSOC: 5. Skilled trades occupations: 96.4\nSOC: 6. Caring leisure and other service occupations: 94.5\nSOC: 7. Sales and customer service occupations: 90.8\nSOC: 8. Process plant and machine operatives: 88.1\nSOC: 9. Elementary occupations: 88.9\nEconomically active: Unemployed: 85.5\n\n#DATA# cluster_key: B\nUsual residents per square kilometre: 112.2\nAged 4 years and under: 111.4\nAged 5 - 14 years: 103.2\nAged 25 - 44 years: 105.4\nAged 45 - 64 years: 96.4\nAged 65 - 84 years: 88.2\nAged 85 years and over: 66.7\nCountry of birth: Europe: United Kingdom: 83.6\nCountry of birth: Europe: EU countries: 163.6\nCountry of birth: Europe: Non-EU countries: 194.6\nCountry of birth: Africa: 244.0\nEthnic group: Bangladeshi: 261.6\nEthnic group: Chinese: 177.7\nEthnic group: Indian: 153.1\nEthnic group: Pakistani: 288.6\nEthnic group: Other Asian: 232.3\nEthnic group: Black: 283.7\nEthnic group: Mixed or Multiple ethnic groups: 150.7\nEthnic group: White: 92.9\nCannot speak English well or at all: 285.7\nNo religion: 100.0\nChristian: 93.3\nOther religion: 124.9\nNever married and never registered a civil partnership: 116.0\nMarried or in a registered civil partnership: 90.5\nSeparated or divorced: 103.5\nOne-person household: 109.5\nFamilies with no children: 89.5\nFamilies with dependent children: 100.9\nAll household members have the same ethnic group: 90.1\nLives in a communal establishment: 90.3\nAddress 1 year ago is the same as the address of enumeration: 97.6\nDetached house or bungalow: 79.1\nSemi-detached house or bungalow: 83.2\nTerraced (including end-terrace) house or bungalow: 138.5\nFlat maisonette or apartment: 150.1\nOwnership or shared ownership: 84.5\nSocial rented: 146.0\nPrivate rented: 119.0\nSIR: 119.1\nProvides unpaid care: 95.3\n2 or more cars or vans in household: 78.3\nHighest level of qualification: Level 1- 2 or Apprenticeship: 97.3\nHighest level of qualification: Level 3 qualifications: 94.5\nHighest level of qualification: Level 4 qualifications or above: 92.6\nHours worked: Part-time: 108.3\nHours worked: Full-time: 95.8\nNS-SeC: L15 Full-time students: 115.7\nSOC: 1. Managers directors and senior officials: 84.5\nSOC: 2. Professional occupations: 91.4\nSOC: 3. Associate professional and technical occupations: 90.6\nSOC: 4. Administrative and secretarial occupations: 92.0\nSOC: 5. Skilled trades occupations: 97.0\nSOC: 6. Caring leisure and other service occupations: 108.0\nSOC: 7. Sales and customer service occupations: 107.9\nSOC: 8. Process plant and machine operatives: 109.4\nSOC: 9. Elementary occupations: 119.4\nEconomically active: Unemployed: 134.5\n\n#DATA# cluster_key: C\nUsual residents per square kilometre: 104.5\nAged 4 years and under: 109.8\nAged 5 - 14 years: 107.5\nAged 25 - 44 years: 102.2\nAged 45 - 64 years: 100.4\nAged 65 - 84 years: 96.8\nAged 85 years and over: 87.1\nCountry of birth: Europe: United Kingdom: 103.5\nCountry of birth: Europe: EU countries: 96.0\nCountry of birth: Europe: Non-EU countries: 74.9\nCountry of birth: Africa: 71.1\nEthnic group: Bangladeshi: 63.9\nEthnic group: Chinese: 64.3\nEthnic group: Indian: 59.4\nEthnic group: Pakistani: 44.6\nEthnic group: Other Asian: 79.0\nEthnic group: Black: 75.7\nEthnic group: Mixed or Multiple ethnic groups: 91.9\nEthnic group: White: 101.5\nCannot speak English well or at all: 88.4\nNo religion: 105.5\nChristian: 99.1\nOther religion: 103.6\nNever married and never registered a civil partnership: 108.4\nMarried or in a registered civil partnership: 96.5\nSeparated or divorced: 105.7\nOne-person household: 101.5\nFamilies with no children: 95.7\nFamilies with dependent children: 105.1\nAll household members have the same ethnic group: 102.0\nLives in a communal establishment: 54.0\nAddress 1 year ago is the same as the address of enumeration: 101.4\nDetached house or bungalow: 76.0\nSemi-detached house or bungalow: 100.7\nTerraced (including end-terrace) house or bungalow: 142.0\nFlat maisonette or apartment: 90.9\nOwnership or shared ownership: 97.1\nSocial rented: 136.9\nPrivate rented: 102.8\nSIR: 116.5\nProvides unpaid care: 101.9\n2 or more cars or vans in household: 94.8\nHighest level of qualification: Level 1- 2 or Apprenticeship: 105.4\nHighest level of qualification: Level 3 qualifications: 99.3\nHighest level of qualification: Level 4 qualifications or above: 83.9\nHours worked: Part-time: 102.8\nHours worked: Full-time: 99.2\nNS-SeC: L15 Full-time students: 99.5\nSOC: 1. Managers directors and senior officials: 89.6\nSOC: 2. Professional occupations: 89.1\nSOC: 3. Associate professional and technical occupations: 95.1\nSOC: 4. Administrative and secretarial occupations: 98.8\nSOC: 5. Skilled trades occupations: 104.8\nSOC: 6. Caring leisure and other service occupations: 109.1\nSOC: 7. Sales and customer service occupations: 107.8\nSOC: 8. Process plant and machine operatives: 113.4\nSOC: 9. Elementary occupations: 112.0\nEconomically active: Unemployed: 116.2\n\n#DATA# cluster_key: D\nUsual residents per square kilometre: 114.2\nAged 4 years and under: 59.2\nAged 5 - 14 years: 48.6\nAged 25 - 44 years: 109.3\nAged 45 - 64 years: 77.7\nAged 65 - 84 years: 59.3\nAged 85 years and over: 27.4\nCountry of birth: Europe: United Kingdom: 72.6\nCountry of birth: Europe: EU countries: 176.4\nCountry of birth: Europe: Non-EU countries: 326.4\nCountry of birth: Africa: 240.6\nEthnic group: Bangladeshi: 249.1\nEthnic group: Chinese: 294.9\nEthnic group: Indian: 306.9\nEthnic group: Pakistani: 327.4\nEthnic group: Other Asian: 220.5\nEthnic group: Black: 259.9\nEthnic group: Mixed or Multiple ethnic groups: 185.4\nEthnic group: White: 91.5\nCannot speak English well or at all: 203.5\nNo religion: 120.6\nChristian: 70.6\nOther religion: 213.9\nNever married and never registered a civil partnership: 132.4\nMarried or in a registered civil partnership: 68.7\nSeparated or divorced: 78.5\nOne-person household: 120.9\nFamilies with no children: 106.8\nFamilies with dependent children: 63.9\nAll household members have the same ethnic group: 68.0\nLives in a communal establishment: 527.8\nAddress 1 year ago is the same as the address of enumeration: 78.0\nDetached house or bungalow: 34.8\nSemi-detached house or bungalow: 33.1\nTerraced (including end-terrace) house or bungalow: 51.1\nFlat maisonette or apartment: 233.3\nOwnership or shared ownership: 72.1\nSocial rented: 111.1\nPrivate rented: 140.7\nSIR: 84.4\nProvides unpaid care: 76.3\n2 or more cars or vans in household: 68.8\nHighest level of qualification: Level 1- 2 or Apprenticeship: 63.2\nHighest level of qualification: Level 3 qualifications: 117.3\nHighest level of qualification: Level 4 qualifications or above: 126.3\nHours worked: Part-time: 95.8\nHours worked: Full-time: 96.6\nNS-SeC: L15 Full-time students: 147.5\nSOC: 1. Managers directors and senior officials: 91.0\nSOC: 2. Professional occupations: 115.7\nSOC: 3. Associate professional and technical occupations: 107.8\nSOC: 4. Administrative and secretarial occupations: 91.6\nSOC: 5. Skilled trades occupations: 72.5\nSOC: 6. Caring leisure and other service occupations: 83.4\nSOC: 7. Sales and customer service occupations: 102.4\nSOC: 8. Process plant and machine operatives: 63.9\nSOC: 9. Elementary occupations: 102.7\nEconomically active: Unemployed: 110.1\n\n#DATA# cluster_key: E\nUsual residents per square kilometre: 90.3\nAged 4 years and under: 94.8\nAged 5 - 14 years: 100.0\nAged 25 - 44 years: 95.8\nAged 45 - 64 years: 102.8\nAged 65 - 84 years: 108.6\nAged 85 years and over: 118.8\nCountry of birth: Europe: United Kingdom: 105.3\nCountry of birth: Europe: EU countries: 68.9\nCountry of birth: Europe: Non-EU countries: 60.8\nCountry of birth: Africa: 59.8\nEthnic group: Bangladeshi: 51.7\nEthnic group: Chinese: 81.1\nEthnic group: Indian: 92.8\nEthnic group: Pakistani: 60.5\nEthnic group: Other Asian: 55.9\nEthnic group: Black: 42.9\nEthnic group: Mixed or Multiple ethnic groups: 77.5\nEthnic group: White: 101.9\nCannot speak English well or at all: 34.8\nNo religion: 91.8\nChristian: 106.6\nOther religion: 70.0\nNever married and never registered a civil partnership: 83.5\nMarried or in a registered civil partnership: 110.7\nSeparated or divorced: 91.3\nOne-person household: 86.3\nFamilies with no children: 108.2\nFamilies with dependent children: 102.0\nAll household members have the same ethnic group: 109.6\nLives in a communal establishment: 56.1\nAddress 1 year ago is the same as the address of enumeration: 101.8\nDetached house or bungalow: 137.4\nSemi-detached house or bungalow: 116.1\nTerraced (including end-terrace) house or bungalow: 47.7\nFlat maisonette or apartment: 31.0\nOwnership or shared ownership: 111.7\nSocial rented: 39.7\nPrivate rented: 79.8\nSIR: 77.2\nProvides unpaid care: 102.7\n2 or more cars or vans in household: 117.8\nHighest level of qualification: Level 1- 2 or Apprenticeship: 100.6\nHighest level of qualification: Level 3 qualifications: 103.8\nHighest level of qualification: Level 4 qualifications or above: 113.1\nHours worked: Part-time: 95.7\nHours worked: Full-time: 102.3\nNS-SeC: L15 Full-time students: 94.1\nSOC: 1. Managers directors and senior officials: 114.0\nSOC: 2. Professional occupations: 109.8\nSOC: 3. Associate professional and technical occupations: 106.9\nSOC: 4. Administrative and secretarial occupations: 105.4\nSOC: 5. Skilled trades occupations: 100.9\nSOC: 6. Caring leisure and other service occupations: 90.7\nSOC: 7. Sales and customer service occupations: 91.8\nSOC: 8. Process plant and machine operatives: 90.5\nSOC: 9. Elementary occupations: 82.8\nEconomically active: Unemployed: 72.0\n\nIn the style of a commercial geodemographic classification; create a cluster name \nthat would summarise the created geodemographic pen portraits. The names should capture as many \ndifferent characteristics contained within the description as possible. \nThe cluster name should be no more than 3 words.\nReturn your response in JSON format with the structure: {\"cluster_key_1\": {\"name\": \"\", \"description\": \"\"},\"cluster_key_2\": {\"name\": \"\", \"description\": \"\"},...}\n\n\nCopy the result in here;\n\ncluster_summaries = {\n  \"A\": {\n    \"name\": \"Established Professional Residents\",\n    \"description\": \"This neighbourhood is characterised by an older demographic profile, with notably higher proportions of residents aged sixty-five and over, particularly those aged eighty-five and above who are represented at considerably elevated levels compared to the regional average. The area has a markedly high concentration of residents living in communal establishments, appearing at more than twice the regional rate. Housing stock is distinctively skewed towards flats, maisonettes, and apartments, which feature at substantially elevated levels, while detached properties also appear somewhat above the regional norm. The residential population shows a strong presence of one-person households, appearing at moderately elevated levels. The neighbourhood demonstrates an established, relatively settled character, with residents predominantly UK-born and overwhelmingly from a single ethnic background. The Black population is notably underrepresented, appearing at substantially lower levels than the regional average, while residents who cannot speak English well or at all are also significantly below regional norms. The area exhibits a professional character, with managers, directors, senior officials, and professional occupations represented at moderately elevated levels. Educational attainment leans towards higher qualifications, with Level 4 qualifications and above appearing at notably higher rates. Residents are more likely to be married or in registered civil partnerships, and somewhat more likely to be separated or divorced than the regional average. The neighbourhood shows lower proportions of families with dependent children and younger age groups, particularly those under five, who appear at moderately reduced levels. Despite the professional occupational profile, full-time students are somewhat underrepresented, and unemployment appears at lower levels than the region. The area has moderately elevated rates of private rental accommodation alongside ownership, suggesting a mixed tenure profile that accommodates both established homeowners and professional renters.\"\n  },\n  \"B\": {\n    \"name\": \"Multicultural Urban Families\",\n    \"description\": \"This neighbourhood stands out for its remarkable ethnic diversity, with substantially elevated representation across multiple minority ethnic groups. Pakistani, Black, Bangladeshi, and Other Asian populations all appear at considerably higher levels than the regional average, with some groups represented at nearly three times the regional rate. Chinese and Indian populations are also present at notably elevated levels, while the White population is moderately below the regional average. This diversity is reflected in the country of birth data, with residents born in Africa appearing at more than twice the regional rate, and those from both EU and non-EU European countries substantially overrepresented. The neighbourhood faces significant linguistic challenges, with residents who cannot speak English well or at all appearing at nearly three times the regional rate. The area has a younger demographic profile, with children under five represented at moderately elevated levels, while older residents, particularly those aged eighty-five and over, appear at substantially reduced rates. The housing landscape is dominated by terraced houses and flats, both appearing at considerably elevated levels, while detached and semi-detached properties are somewhat underrepresented. Social rented accommodation features prominently at substantially higher rates, alongside moderately elevated private rental levels, while ownership rates fall notably below the regional average. Vehicle ownership is considerably lower, with households having two or more cars appearing at substantially reduced levels. The occupational structure skews towards elementary occupations, which appear at moderately elevated rates, while managers, directors, and senior officials are somewhat underrepresented. Unemployment appears at considerably higher levels than the regional average. The neighbourhood shows elevated proportions of part-time workers and full-time students. Despite the diverse population, families with dependent children appear at levels close to the regional average, while one-person households are moderately elevated. Religious adherence is notable, with followers of non-Christian religions appearing at moderately elevated levels.\"\n  },\n  \"C\": {\n    \"name\": \"Working Family Terraces\",\n    \"description\": \"This neighbourhood presents a working-class character with a predominantly UK-born, White population that closely mirrors regional averages. The area is notably less diverse than the region, with most minority ethnic groups substantially underrepresented, particularly Pakistani populations who appear at less than half the regional rate. Black, Bangladeshi, Chinese, and Indian populations are all present at considerably reduced levels. Residents born in Africa, non-EU Europe, and EU countries all appear at notably lower rates than the regional average. The demographic profile shows a family-oriented character, with children under five and those aged five to fourteen both appearing at moderately elevated levels, while residents aged eighty-five and over are present at somewhat reduced rates. Families with dependent children feature at moderately higher levels than the region. The housing stock is heavily weighted towards terraced properties, which appear at substantially elevated rates, while detached houses and flats are both considerably underrepresented. Social rented accommodation is present at considerably elevated levels, while ownership rates remain close to regional norms. The communal establishment population is dramatically underrepresented, appearing at nearly half the regional rate. The neighbourhood's occupational profile reveals a working-class character, with elementary occupations, process plant and machine operatives, sales and customer service occupations, and caring service occupations all appearing at moderately elevated levels. Conversely, managers, directors, senior officials, and professional occupations are both somewhat underrepresented. Educational attainment trends lower, with Level 4 qualifications considerably below regional rates, while Level 1-2 qualifications appear at moderately elevated levels. Unemployment is present at moderately higher rates than the regional average. The area shows relative residential stability, with most residents living at the same address as one year prior, and households predominantly comprising members from the same ethnic group.\"\n  },\n  \"D\": {\n    \"name\": \"Student Cosmopolitan Flats\",\n    \"description\": \"This neighbourhood exhibits a distinctly transient, young adult character, overwhelmingly dominated by residents living in communal establishments at more than five times the regional rate. The area shows a dramatic absence of children and older residents, with those aged under five appearing at less than two-thirds the regional rate, those aged five to fourteen at less than half, and those aged eighty-five and over at roughly one-quarter of regional levels. Middle-aged residents are also considerably underrepresented. The population is remarkably diverse and internationally oriented, with residents born outside the UK substantially overrepresented. Those born in non-EU European countries appear at more than three times the regional rate, while African and EU-born residents are also present at considerably elevated levels. UK-born residents are notably underrepresented. This international character is reflected in exceptional ethnic diversity, with Pakistani, Indian, Chinese, Black, Bangladeshi, Other Asian, and Mixed ethnic group populations all appearing at substantially elevated levels, many at roughly three times the regional rate. The White population is moderately below regional averages. Language barriers are significant, with residents who cannot speak English well or at all appearing at roughly twice the regional rate. Full-time students are present at substantially elevated rates, nearly one and a half times the regional average, explaining much of the neighbourhood's character. The housing stock is dominated by flats, maisonettes, and apartments at more than twice the regional rate, while traditional houses—detached, semi-detached, and terraced—are all dramatically underrepresented. Private rental accommodation is substantially elevated, while ownership rates are notably below regional levels. The area shows high residential turnover, with residents far less likely to be living at the same address as one year prior. Educational qualifications trend higher, with Level 3 and particularly Level 4 qualifications above regional rates, while lower-level qualifications are substantially underrepresented. Professional occupations appear at moderately elevated levels, while skilled trades and process plant operatives are considerably below regional averages. Never-married individuals are substantially overrepresented, while married couples and families with dependent children appear at considerably reduced rates.\"\n  },\n  \"E\": {\n    \"name\": \"Suburban Family Homeowners\",\n    \"description\": \"This neighbourhood represents an affluent, predominantly White British suburban character. The population is overwhelmingly UK-born, with residents from EU countries, non-EU Europe, and Africa all appearing at substantially reduced levels compared to the regional average. Ethnic diversity is notably low, with Black populations present at less than half the regional rate, and Pakistani, Bangladeshi, Other Asian, and Mixed ethnic group populations all considerably underrepresented. Language barriers are virtually absent, with residents who cannot speak English well or at all appearing at roughly one-third of the regional rate. The area exhibits strong ethnic homogeneity, with households where all members share the same ethnic group appearing at moderately elevated levels. The demographic profile skews slightly older, with residents aged sixty-five to eighty-four and those aged eighty-five and over both appearing at moderately elevated rates. The housing landscape is characterised by owner-occupation at moderately elevated levels, with detached houses substantially overrepresented and semi-detached properties also appearing above regional averages. Conversely, terraced houses appear at less than half the regional rate, while flats are dramatically underrepresented at roughly one-third of regional levels. Social rented accommodation is substantially below regional averages, as is private rental accommodation. The area demonstrates affluence through vehicle ownership, with households possessing two or more cars appearing at moderately elevated rates. The occupational structure reflects professional and managerial employment, with managers, directors, senior officials, professional occupations, and associate professional and technical occupations all appearing at moderately elevated levels. Elementary occupations are somewhat underrepresented. Educational attainment is strong, with Level 4 qualifications and above appearing at moderately elevated rates. Employment rates are favourable, with unemployment substantially below regional levels at roughly three-quarters of the regional rate. The neighbourhood shows a family-oriented character, with married couples moderately overrepresented and never-married individuals somewhat underrepresented. Families with no children appear at moderately elevated levels. One-person households and communal establishment residents are both substantially below regional averages, reinforcing the family-oriented suburban character.\"\n  }\n}\ncluster_descriptions_df = pd.DataFrame.from_dict(cluster_summaries, orient='index')\n\n\n#pretty print the descriptions (break lines for readability)\nfor cluster, row in cluster_descriptions_df.iterrows():\n    print(f\"Cluster {cluster} - {row['name']}:\\n\")\n    description = row['description']\n    #break into lines of max 80 characters\n    import textwrap\n    wrapped_description = textwrap.fill(description, width=70)\n    print(wrapped_description, \"\\n\\n\")\n\nCluster A - Established Professional Residents:\n\nThis neighbourhood is characterised by an older demographic profile,\nwith notably higher proportions of residents aged sixty-five and over,\nparticularly those aged eighty-five and above who are represented at\nconsiderably elevated levels compared to the regional average. The\narea has a markedly high concentration of residents living in communal\nestablishments, appearing at more than twice the regional rate.\nHousing stock is distinctively skewed towards flats, maisonettes, and\napartments, which feature at substantially elevated levels, while\ndetached properties also appear somewhat above the regional norm. The\nresidential population shows a strong presence of one-person\nhouseholds, appearing at moderately elevated levels. The neighbourhood\ndemonstrates an established, relatively settled character, with\nresidents predominantly UK-born and overwhelmingly from a single\nethnic background. The Black population is notably underrepresented,\nappearing at substantially lower levels than the regional average,\nwhile residents who cannot speak English well or at all are also\nsignificantly below regional norms. The area exhibits a professional\ncharacter, with managers, directors, senior officials, and\nprofessional occupations represented at moderately elevated levels.\nEducational attainment leans towards higher qualifications, with Level\n4 qualifications and above appearing at notably higher rates.\nResidents are more likely to be married or in registered civil\npartnerships, and somewhat more likely to be separated or divorced\nthan the regional average. The neighbourhood shows lower proportions\nof families with dependent children and younger age groups,\nparticularly those under five, who appear at moderately reduced\nlevels. Despite the professional occupational profile, full-time\nstudents are somewhat underrepresented, and unemployment appears at\nlower levels than the region. The area has moderately elevated rates\nof private rental accommodation alongside ownership, suggesting a\nmixed tenure profile that accommodates both established homeowners and\nprofessional renters. \n\n\nCluster B - Multicultural Urban Families:\n\nThis neighbourhood stands out for its remarkable ethnic diversity,\nwith substantially elevated representation across multiple minority\nethnic groups. Pakistani, Black, Bangladeshi, and Other Asian\npopulations all appear at considerably higher levels than the regional\naverage, with some groups represented at nearly three times the\nregional rate. Chinese and Indian populations are also present at\nnotably elevated levels, while the White population is moderately\nbelow the regional average. This diversity is reflected in the country\nof birth data, with residents born in Africa appearing at more than\ntwice the regional rate, and those from both EU and non-EU European\ncountries substantially overrepresented. The neighbourhood faces\nsignificant linguistic challenges, with residents who cannot speak\nEnglish well or at all appearing at nearly three times the regional\nrate. The area has a younger demographic profile, with children under\nfive represented at moderately elevated levels, while older residents,\nparticularly those aged eighty-five and over, appear at substantially\nreduced rates. The housing landscape is dominated by terraced houses\nand flats, both appearing at considerably elevated levels, while\ndetached and semi-detached properties are somewhat underrepresented.\nSocial rented accommodation features prominently at substantially\nhigher rates, alongside moderately elevated private rental levels,\nwhile ownership rates fall notably below the regional average. Vehicle\nownership is considerably lower, with households having two or more\ncars appearing at substantially reduced levels. The occupational\nstructure skews towards elementary occupations, which appear at\nmoderately elevated rates, while managers, directors, and senior\nofficials are somewhat underrepresented. Unemployment appears at\nconsiderably higher levels than the regional average. The\nneighbourhood shows elevated proportions of part-time workers and\nfull-time students. Despite the diverse population, families with\ndependent children appear at levels close to the regional average,\nwhile one-person households are moderately elevated. Religious\nadherence is notable, with followers of non-Christian religions\nappearing at moderately elevated levels. \n\n\nCluster C - Working Family Terraces:\n\nThis neighbourhood presents a working-class character with a\npredominantly UK-born, White population that closely mirrors regional\naverages. The area is notably less diverse than the region, with most\nminority ethnic groups substantially underrepresented, particularly\nPakistani populations who appear at less than half the regional rate.\nBlack, Bangladeshi, Chinese, and Indian populations are all present at\nconsiderably reduced levels. Residents born in Africa, non-EU Europe,\nand EU countries all appear at notably lower rates than the regional\naverage. The demographic profile shows a family-oriented character,\nwith children under five and those aged five to fourteen both\nappearing at moderately elevated levels, while residents aged eighty-\nfive and over are present at somewhat reduced rates. Families with\ndependent children feature at moderately higher levels than the\nregion. The housing stock is heavily weighted towards terraced\nproperties, which appear at substantially elevated rates, while\ndetached houses and flats are both considerably underrepresented.\nSocial rented accommodation is present at considerably elevated\nlevels, while ownership rates remain close to regional norms. The\ncommunal establishment population is dramatically underrepresented,\nappearing at nearly half the regional rate. The neighbourhood's\noccupational profile reveals a working-class character, with\nelementary occupations, process plant and machine operatives, sales\nand customer service occupations, and caring service occupations all\nappearing at moderately elevated levels. Conversely, managers,\ndirectors, senior officials, and professional occupations are both\nsomewhat underrepresented. Educational attainment trends lower, with\nLevel 4 qualifications considerably below regional rates, while Level\n1-2 qualifications appear at moderately elevated levels. Unemployment\nis present at moderately higher rates than the regional average. The\narea shows relative residential stability, with most residents living\nat the same address as one year prior, and households predominantly\ncomprising members from the same ethnic group. \n\n\nCluster D - Student Cosmopolitan Flats:\n\nThis neighbourhood exhibits a distinctly transient, young adult\ncharacter, overwhelmingly dominated by residents living in communal\nestablishments at more than five times the regional rate. The area\nshows a dramatic absence of children and older residents, with those\naged under five appearing at less than two-thirds the regional rate,\nthose aged five to fourteen at less than half, and those aged eighty-\nfive and over at roughly one-quarter of regional levels. Middle-aged\nresidents are also considerably underrepresented. The population is\nremarkably diverse and internationally oriented, with residents born\noutside the UK substantially overrepresented. Those born in non-EU\nEuropean countries appear at more than three times the regional rate,\nwhile African and EU-born residents are also present at considerably\nelevated levels. UK-born residents are notably underrepresented. This\ninternational character is reflected in exceptional ethnic diversity,\nwith Pakistani, Indian, Chinese, Black, Bangladeshi, Other Asian, and\nMixed ethnic group populations all appearing at substantially elevated\nlevels, many at roughly three times the regional rate. The White\npopulation is moderately below regional averages. Language barriers\nare significant, with residents who cannot speak English well or at\nall appearing at roughly twice the regional rate. Full-time students\nare present at substantially elevated rates, nearly one and a half\ntimes the regional average, explaining much of the neighbourhood's\ncharacter. The housing stock is dominated by flats, maisonettes, and\napartments at more than twice the regional rate, while traditional\nhouses—detached, semi-detached, and terraced—are all dramatically\nunderrepresented. Private rental accommodation is substantially\nelevated, while ownership rates are notably below regional levels. The\narea shows high residential turnover, with residents far less likely\nto be living at the same address as one year prior. Educational\nqualifications trend higher, with Level 3 and particularly Level 4\nqualifications above regional rates, while lower-level qualifications\nare substantially underrepresented. Professional occupations appear at\nmoderately elevated levels, while skilled trades and process plant\noperatives are considerably below regional averages. Never-married\nindividuals are substantially overrepresented, while married couples\nand families with dependent children appear at considerably reduced\nrates. \n\n\nCluster E - Suburban Family Homeowners:\n\nThis neighbourhood represents an affluent, predominantly White British\nsuburban character. The population is overwhelmingly UK-born, with\nresidents from EU countries, non-EU Europe, and Africa all appearing\nat substantially reduced levels compared to the regional average.\nEthnic diversity is notably low, with Black populations present at\nless than half the regional rate, and Pakistani, Bangladeshi, Other\nAsian, and Mixed ethnic group populations all considerably\nunderrepresented. Language barriers are virtually absent, with\nresidents who cannot speak English well or at all appearing at roughly\none-third of the regional rate. The area exhibits strong ethnic\nhomogeneity, with households where all members share the same ethnic\ngroup appearing at moderately elevated levels. The demographic profile\nskews slightly older, with residents aged sixty-five to eighty-four\nand those aged eighty-five and over both appearing at moderately\nelevated rates. The housing landscape is characterised by owner-\noccupation at moderately elevated levels, with detached houses\nsubstantially overrepresented and semi-detached properties also\nappearing above regional averages. Conversely, terraced houses appear\nat less than half the regional rate, while flats are dramatically\nunderrepresented at roughly one-third of regional levels. Social\nrented accommodation is substantially below regional averages, as is\nprivate rental accommodation. The area demonstrates affluence through\nvehicle ownership, with households possessing two or more cars\nappearing at moderately elevated rates. The occupational structure\nreflects professional and managerial employment, with managers,\ndirectors, senior officials, professional occupations, and associate\nprofessional and technical occupations all appearing at moderately\nelevated levels. Elementary occupations are somewhat underrepresented.\nEducational attainment is strong, with Level 4 qualifications and\nabove appearing at moderately elevated rates. Employment rates are\nfavourable, with unemployment substantially below regional levels at\nroughly three-quarters of the regional rate. The neighbourhood shows a\nfamily-oriented character, with married couples moderately\noverrepresented and never-married individuals somewhat\nunderrepresented. Families with no children appear at moderately\nelevated levels. One-person households and communal establishment\nresidents are both substantially below regional averages, reinforcing\nthe family-oriented suburban character. \n\n\n\n\nWhile the LLM generated names and descriptions are a very useful starting point, it is important to review the outputs carefully both for accuracy, and that they make sense in the context of your specific region and purpose. Any use of LLMs in a production context would need to invove a human in the loop to review the outputs and a ground truthing exercise to ensure the outputs are valid."
  },
  {
    "objectID": "creatinggeodem.html#save-results",
    "href": "creatinggeodem.html#save-results",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Save Results",
    "text": "Save Results\nLets save the results to file for use in GIS software or to format for sharing.\n\ncluster_descriptions_df.to_csv(\"outputs/cluster_descriptions.csv\")\ngdf = oas_region.merge(supergrouped_variable_df, left_index=True, right_index=True, how='left')\n#save to gpkg\ngdf.to_file(\"outputs/clustered_geodataframe.gpkg\", layer=\"clusters\", driver=\"GPKG\")"
  },
  {
    "objectID": "creatinggeodem.html#selecting-the-number-of-subclusters",
    "href": "creatinggeodem.html#selecting-the-number-of-subclusters",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Selecting the Number of Subclusters",
    "text": "Selecting the Number of Subclusters\nWe can use clustergrams again to select the number of subclusters for each supergroup. We create clustergrams for each supergroup and select the number of subclusters based on the same principles as before.\n\ndef create_subcluster_clustergrams(output_df, num_clusters, n_init=1):\n    \"\"\"\n    Generate and save clustergrams for each supercluster.\n    This function loops through the existing clusters and creates a clustergram \n    for each\n    Parameters:\n    output_df (pd.DataFrame): DataFrame containing cluster assignments.\n    num_clusters (int): The total number of clusters to iterate over.\n    n_init (int, optional): Number of times K-means runs with different centroid seeds.\n                            Defaults to 1 for quick testing.\n\n    \"\"\"\n    save_dir = \"outputs/plots\" #directory to save the clustergrams\n    os.makedirs(save_dir, exist_ok=True)  # Ensure save directory exists\n    cluster_labels = np.sort(output_df[\"cluster\"].unique())\n    print(cluster_labels)\n    for cluster_label in cluster_labels:\n        # Select rows corresponding to the current cluster, dropping the 'cluster' column\n        cluster_df = output_df.query(\"cluster == @cluster_label\").drop(columns='cluster')\n\n        print(f\"Cluster: {cluster_label,cluster_summaries[cluster_label]['name']}, {len(cluster_df)} geographies in cluster\")\n\n        if cluster_df.empty:\n            print(f\"Skipping cluster {cluster_label} as it has no data.\")\n            continue\n\n        # Define save location\n        save_loc = os.path.join(save_dir, f\"subcluster_clustergram_cluster{cluster_label}.png\")\n        print(f\"Saving clustergram to {save_loc}\")\n\n        # Generate clustergram\n        cgram_sub = Clustergram(range(1, 10), n_init=n_init, random_state=random_seed,verbose=False)\n        cgram_sub.fit(cluster_df)  # Fit model to data\n        cgram_sub.plot()  # Generate plot\n        plt.suptitle(f\"Clustergram for Cluster {cluster_label} - {cluster_summaries[cluster_label]['name']}\")\n        plt.savefig(save_loc)  # Save figure\n        plt.show()  # Display plot\n\n# Example usage\ncreate_subcluster_clustergrams(supergrouped_variable_df, num_clusters, n_init=50)\n\n\n['A' 'B' 'C' 'D' 'E']\nCluster: ('A', 'Established Professional Residents'), 804 geographies in cluster\nSaving clustergram to outputs/plots/subcluster_clustergram_clusterA.png\n\n\n\n\n\n\n\n\n\nCluster: ('B', 'Multicultural Urban Families'), 737 geographies in cluster\nSaving clustergram to outputs/plots/subcluster_clustergram_clusterB.png\n\n\n\n\n\n\n\n\n\nCluster: ('C', 'Working Family Terraces'), 1875 geographies in cluster\nSaving clustergram to outputs/plots/subcluster_clustergram_clusterC.png\n\n\n\n\n\n\n\n\n\nCluster: ('D', 'Student Cosmopolitan Flats'), 192 geographies in cluster\nSaving clustergram to outputs/plots/subcluster_clustergram_clusterD.png\n\n\n\n\n\n\n\n\n\nCluster: ('E', 'Suburban Family Homeowners'), 1650 geographies in cluster\nSaving clustergram to outputs/plots/subcluster_clustergram_clusterE.png"
  },
  {
    "objectID": "creatinggeodem.html#run-the-subclustering",
    "href": "creatinggeodem.html#run-the-subclustering",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Run the subclustering",
    "text": "Run the subclustering\nWe can now select the number of subclusters to split each of the supergroups into using the clustergrams above. The length of the list must match num_clusters (the number of supergroups).\n\nsubcluster_nums = [3, 3, 4, 3, 3]\n\n\n\ndef run_subclustering(input_df: pd.DataFrame, subcluster_nums: list, num_clusters: int, n_init: int = 1) -&gt; pd.DataFrame:\n    \"\"\"\n    Runs subclustering for each supergroup using KMeans and returns a modified DataFrame with subcluster labels.\n    \n    Parameters:\n    - output_df (pd.DataFrame): The original DataFrame containing data and cluster assignments.\n    - subcluster_nums (list): A list specifying the number of subclusters to split each supergroup into.\n    - num_clusters (int): The total number of supergroups.\n    - n_init (int, optional): The number of times KMeans will be initialized. Defaults to 1.\n\n    Returns:\n    - pd.DataFrame: A new the output dataFrame with an added 'subcluster' column.\n    \"\"\"\n\n    cluster_labels = np.sort(input_df[\"cluster\"].unique())\n    print(f\"Cluster labels found: {cluster_labels}\")\n    if len(subcluster_nums) != len(cluster_labels):\n        raise ValueError(f\"Length of subcluster_nums ({len(subcluster_nums)}) does not match num_clusters ({len(cluster_labels)}).\")\n\n    # Work on a copy of the DataFrame to prevent unintended modifications\n    df = input_df.copy()\n\n    for cluster, num_subclusters in zip(cluster_labels, subcluster_nums):\n        print(f\"Clustering supergroup {cluster,cluster_summaries[cluster]['name']} into {num_subclusters} subclusters.\")\n\n        # Select rows corresponding to the current cluster, drop the cluster column before clustering\n        cluster_df = input_df.query(\"cluster == @cluster\").drop(columns='cluster').copy()\n        # Run KMeans clustering for the selected supergroup\n        subcluster_output_df = cluster_df.copy()\n        kmeans_sub = KMeans(n_clusters=num_subclusters, init=\"random\", random_state=random_seed, n_init=n_init)\n        subcluster_output_df['cluster'] = kmeans_sub.fit_predict(cluster_df)\n\n        # Combine names\n        subcluster_output_df['subcluster'] = [str(cluster) + str(i) for i in subcluster_output_df['cluster']]\n\n        # Update the modified DataFrame with subclustering results\n        df.loc[cluster_df.index, 'subcluster'] = subcluster_output_df['subcluster']\n\n    # Save the final output\n    df.to_csv(\"outputs/subgroups_clusteroutput.csv\")\n    print(\"Final output saved to outputs/subgroups_clusteroutput.csv\")\n\n    return df  # Return the modified DataFrame with clusters and subclusters\n\nsubgrouped_variable_df = run_subclustering(supergrouped_variable_df, subcluster_nums, num_clusters=num_clusters, n_init=1)\n\nCluster labels found: ['A' 'B' 'C' 'D' 'E']\nClustering supergroup ('A', 'Established Professional Residents') into 3 subclusters.\nClustering supergroup ('B', 'Multicultural Urban Families') into 3 subclusters.\nClustering supergroup ('C', 'Working Family Terraces') into 4 subclusters.\nClustering supergroup ('D', 'Student Cosmopolitan Flats') into 3 subclusters.\nClustering supergroup ('E', 'Suburban Family Homeowners') into 3 subclusters.\nFinal output saved to outputs/subgroups_clusteroutput.csv"
  },
  {
    "objectID": "creatinggeodem.html#visualise-and-save-the-results",
    "href": "creatinggeodem.html#visualise-and-save-the-results",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Visualise and save the results",
    "text": "Visualise and save the results\n\n# --- Calculate percentage difference (subclusters vs cluster means) ---\n\n# cluster means for reference\ncluster_means = subgrouped_variable_df.groupby(\"cluster\").mean(numeric_only=True)\nglobal_means = subgrouped_variable_df[features].mean()\n# subcluster means\nsubcluster_means = subgrouped_variable_df.groupby([\"cluster\", \"subcluster\"]).mean(numeric_only=True)\n\n# percentage difference: subcluster relative to parent cluster\npct_diff_sub = (subcluster_means / cluster_means) * 100\npct_diff_sub = (subcluster_means/ global_means)*100\npct_display_df_sub = pct_diff_sub.T  # index = features (encodings), columns = MultiIndex (cluster, subcluster)\n#replace the column MultiIndex with a single level index with \"cluster-subcluster\" format and swap in the cluster names from cluster_summaries\npct_display_df_sub.columns = [f\"{cluster_summaries[c[0]]['name']}-{c[1]}\" for c in pct_display_df_sub.columns]\n\n\n\n# build customdata for hover (human names repeated across cluster–subcluster combos)\nhuman_names = pct_display_df_sub.index.map(lambda e: encoding_to_name.get(e, e)).values\ncustomdata_pct_sub = np.tile(human_names.reshape(-1, 1), (1, pct_display_df_sub.shape[1]))\n\n# get symmetric range around 100\nmax_abs_sub = np.nanmax(np.abs(pct_display_df_sub.values - 100))\n\n# --- Heatmap (percentage difference: subcluster vs cluster mean) ---\nfig_pct_sub = px.imshow(\n    pct_display_df_sub,\n    color_continuous_scale=\"RdYlGn\",\n    origin=\"lower\",\n    aspect=\"auto\",\n    labels=dict(x=\"Subcluster\", y=\"Feature (encoding)\", color=\"% of cluster mean\"),\n    zmin=0,\n    zmax=200\n)\n\n# attach customdata and set hover\nfig_pct_sub.data[0].customdata = customdata_pct_sub\nfig_pct_sub.update_traces(\n    hovertemplate=\"Subcluster: %{x}&lt;br&gt;Encoding: %{y}&lt;br&gt;Name: %{customdata}&lt;br&gt;% of Cluster Mean: %{z:.1f}%&lt;extra&gt;&lt;/extra&gt;\",\n    zmid=100  # centre colours on 100%\n)\n\nfig_pct_sub.update_layout(\n    title=\"Subcluster Profiles (% of Cluster Mean)\",\n    xaxis_title=\"Subcluster\",\n    yaxis_title=\"Feature (encoding)\",\n    height=800\n)\n\n# get mapping of column → cluster\ncol_clusters = [col.split(\"-\")[0] for col in pct_display_df_sub.columns]\n\n# find where cluster changes (between adjacent columns)\nboundaries = [\n    i + 0.5 for i in range(len(col_clusters) - 1)\n    if col_clusters[i] != col_clusters[i + 1]\n]\n\n# add vertical lines at these boundaries\nfor b in boundaries:\n    fig_pct_sub.add_vline(\n        x=b, line_width=2, line_dash=\"dash\", line_color=\"black\"\n    )\n\nfig_pct_sub.show()\n\n                            \n                                            \n\n\nSave the results to file for use in GIS software or to format for sharing:\n\n#merge the geometry column from oas_region to subgrouped_variable_df to make a geodataframe\ngdf = oas_region.merge(subgrouped_variable_df  , left_index=True, right_index=True, how='left')\n#save to file\ngdf.to_file(\"outputs/subclusters_geodataframe.gpkg\", layer='subclusters', driver=\"GPKG\")"
  },
  {
    "objectID": "creatinggeodem.html#map-the-subclusters",
    "href": "creatinggeodem.html#map-the-subclusters",
    "title": "Creating Cutting-Edge Geodemographic Classifications from Scratch in Python",
    "section": "Map the Subclusters",
    "text": "Map the Subclusters"
  }
]